{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoginService {\n  constructor(http) {\n    this.http = http;\n  }\n  //CREAMOS EL METODO LOGIN\n  //login(formulario_input:any){ //any es muy generico\n  login(formulario_input) {\n    return this.http.get('././assets/daata.json').pipe(catchError(this.handlerError));\n  }\n  //MANEJADOR DE ERRORES\n  handlerError(error) {\n    if (error.status === 0) {\n      console.error('Se ha producido un error', error.error);\n    } else {\n      console.error('Backend retorno el codigo de estado', error.status, error.error);\n      //retornamos la excepcion.\n    }\n    return throwError(() => new Error('Algo fallo, intente nuevamente'));\n  }\n  static #_ = this.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","throwError","LoginService","constructor","http","login","formulario_input","get","pipe","handlerError","error","status","console","Error","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/jota/Documentos/GitHub/ProAsix/src/app/services/auth/login/login.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { LoginRequest } from './loginRequest';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { User } from '../user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor(private http: HttpClient) { }\n  //CREAMOS EL METODO LOGIN\n  //login(formulario_input:any){ //any es muy generico\n  login(formulario_input:LoginRequest): Observable<User> {\n    return this.http.get<User>('././assets/daata.json').pipe(\n      catchError(this.handlerError)\n    )\n  }\n\n  //MANEJADOR DE ERRORES\n  private handlerError(error:HttpErrorResponse){\n    if (error.status===0){\n      console.error('Se ha producido un error', error.error)\n    } else {\n      console.error('Backend retorno el codigo de estado', error.status, error.error);\n      //retornamos la excepcion.\n    } return throwError (()=> new Error('Algo fallo, intente nuevamente'));\n  }\n}\n"],"mappings":"AAGA,SAAqBA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAMzD,OAAM,MAAOC,YAAY;EAEvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EACxC;EACA;EACAC,KAAKA,CAACC,gBAA6B;IACjC,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAO,uBAAuB,CAAC,CAACC,IAAI,CACtDR,UAAU,CAAC,IAAI,CAACS,YAAY,CAAC,CAC9B;EACH;EAEA;EACQA,YAAYA,CAACC,KAAuB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAG,CAAC,EAAC;MACnBC,OAAO,CAACF,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACA,KAAK,CAAC;IACxD,CAAC,MAAM;MACLE,OAAO,CAACF,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAACC,MAAM,EAAED,KAAK,CAACA,KAAK,CAAC;MAC/E;IACF;IAAE,OAAOT,UAAU,CAAE,MAAK,IAAIY,KAAK,CAAC,gCAAgC,CAAC,CAAC;EACxE;EAAC,QAAAC,CAAA,G;qBAnBUZ,YAAY,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZjB,YAAY;IAAAkB,OAAA,EAAZlB,YAAY,CAAAmB,IAAA;IAAAC,UAAA,EAFX;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}