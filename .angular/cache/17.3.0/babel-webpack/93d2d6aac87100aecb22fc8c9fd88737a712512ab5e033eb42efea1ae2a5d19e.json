{"ast":null,"code":"// import { Injectable, inject } from '@angular/core'\n// import { Auth, authState } from '@angular/fire/auth';\n// import { \n//     AuthProvider,\n//     GithubAuthProvider,\n//     GoogleAuthProvider,\n//     UserCredential,\n//     createUserWithEmailAndPassword,\n//     signInWithEmailAndPassword,\n//     signInWithPopup,\n// } from 'firebase/auth';\n// //import { Auth } from 'firebase/auth';\nimport { __decorate } from \"tslib\";\n// export interface Credential {\n//     email:string;\n//     password:string;\n// }\n// @Injectable({\n//     providedIn: 'root'\n// })\n// export class AuthService{\n//     //inyeccion, doc firebase\n//     private auth: Auth = inject(Auth);\n//     readonly authState$ = authState(this.auth)\n//     signInWithEmailAndPassword(credencial:Credential): Promise<UserCredential>{\n//         //necesita el auth (inyectado), email (string) y pass(string)\n//         return createUserWithEmailAndPassword(\n//             this.auth,\n//             credencial.email,\n//             credencial.password\n//         )\n//     }\n//     loginEmailCont(credencial:Credential){\n//         return signInWithEmailAndPassword(\n//             this.auth,\n//             credencial.email,\n//             credencial.password\n//         )\n//     }\n//     // providers\n//     signInWithGoogleProvider(): Promise<UserCredential> {\n//         const provider = new GoogleAuthProvider();\n//         return this.callPopUp(provider);\n//     }\n//     signInWithGithubProvider(): Promise<UserCredential> {\n//         const provider = new GithubAuthProvider();\n//         return this.callPopUp(provider);\n//   }\n//   async callPopUp(provider: AuthProvider): Promise<UserCredential> {\n//     try {\n//       const result = await signInWithPopup(this.auth, provider);\n//       return result;\n//     } catch (error: any) {\n//       return error;\n//     }\n//   }\n// }\n// ---------------------------------\n// import { Injectable, inject } from '@angular/core';\n// import {\n//   Auth,\n//   AuthProvider,\n//   GithubAuthProvider,\n//   GoogleAuthProvider,\n//   UserCredential,\n//   authState,\n//   createUserWithEmailAndPassword,\n//   signInWithEmailAndPassword,\n//   signInWithPopup,\n// } from '@angular/fire/auth';\n// export interface Credential {\n//   email: string;\n//   password: string;\n// }\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class AuthService {\n//   private auth: Auth = inject(Auth);\n//   readonly authState$ = authState(this.auth);\n//   signUpWithEmailAndPassword(credential: Credential): Promise<UserCredential> {\n//     return createUserWithEmailAndPassword(\n//       this.auth,\n//       credential.email,\n//       credential.password\n//     );\n//   }\n//   logInWithEmailAndPassword(credential: Credential) {\n//     return signInWithEmailAndPassword(\n//       this.auth,\n//       credential.email,\n//       credential.password\n//     );\n//   }\n//   logOut(): Promise<void> {\n//     return this.auth.signOut();\n//   }\n//   // providers\n//   signInWithGoogleProvider(): Promise<UserCredential> {\n//     const provider = new GoogleAuthProvider();\n//     return this.callPopUp(provider);\n//   }\n//   signInWithGithubProvider(): Promise<UserCredential> {\n//     const provider = new GithubAuthProvider();\n//     return this.callPopUp(provider);\n//   }\n//   async callPopUp(provider: AuthProvider): Promise<UserCredential> {\n//     try {\n//       const result = await signInWithPopup(this.auth, provider);\n//       return result;\n//     } catch (error: any) {\n//       return error;\n//     }\n//   }\n// }\n// ---------------------------------\n// auth.service.ts\nimport { Injectable } from '@angular/core';\nlet AuthService = class AuthService {\n  constructor(afAuth) {\n    this.afAuth = afAuth;\n  }\n  signUpWithEmailAndPassword(credential) {\n    return this.afAuth.createUserWithEmailAndPassword(credential.email, credential.password);\n  }\n  signInWithEmailAndPassword(credential) {\n    return this.afAuth.signInWithEmailAndPassword(credential.email, credential.password);\n  }\n  signOut() {\n    return this.afAuth.signOut();\n  }\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"names":["Injectable","AuthService","constructor","afAuth","signUpWithEmailAndPassword","credential","createUserWithEmailAndPassword","email","password","signInWithEmailAndPassword","signOut","__decorate","providedIn"],"sources":["C:\\Users\\ASUS\\Documents\\GitHub\\ProAsix\\src\\app\\services\\auth\\firebase\\auth.service.ts"],"sourcesContent":["// import { Injectable, inject } from '@angular/core'\r\n// import { Auth, authState } from '@angular/fire/auth';\r\n// import { \r\n//     AuthProvider,\r\n//     GithubAuthProvider,\r\n//     GoogleAuthProvider,\r\n//     UserCredential,\r\n//     createUserWithEmailAndPassword,\r\n//     signInWithEmailAndPassword,\r\n//     signInWithPopup,\r\n// } from 'firebase/auth';\r\n// //import { Auth } from 'firebase/auth';\r\n\r\n// export interface Credential {\r\n//     email:string;\r\n//     password:string;\r\n// }\r\n\r\n// @Injectable({\r\n//     providedIn: 'root'\r\n// })\r\n// export class AuthService{\r\n//     //inyeccion, doc firebase\r\n//     private auth: Auth = inject(Auth);\r\n\r\n//     readonly authState$ = authState(this.auth)\r\n\r\n//     signInWithEmailAndPassword(credencial:Credential): Promise<UserCredential>{\r\n//         //necesita el auth (inyectado), email (string) y pass(string)\r\n//         return createUserWithEmailAndPassword(\r\n//             this.auth,\r\n//             credencial.email,\r\n//             credencial.password\r\n//         )\r\n//     }\r\n\r\n//     loginEmailCont(credencial:Credential){\r\n//         return signInWithEmailAndPassword(\r\n//             this.auth,\r\n//             credencial.email,\r\n//             credencial.password\r\n//         )\r\n//     }\r\n\r\n//     // providers\r\n\r\n//     signInWithGoogleProvider(): Promise<UserCredential> {\r\n//         const provider = new GoogleAuthProvider();\r\n\r\n//         return this.callPopUp(provider);\r\n//     }\r\n\r\n//     signInWithGithubProvider(): Promise<UserCredential> {\r\n//         const provider = new GithubAuthProvider();\r\n\r\n//         return this.callPopUp(provider);\r\n//   }\r\n\r\n//   async callPopUp(provider: AuthProvider): Promise<UserCredential> {\r\n//     try {\r\n//       const result = await signInWithPopup(this.auth, provider);\r\n\r\n//       return result;\r\n//     } catch (error: any) {\r\n//       return error;\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n// ---------------------------------\r\n\r\n\r\n// import { Injectable, inject } from '@angular/core';\r\n// import {\r\n//   Auth,\r\n//   AuthProvider,\r\n//   GithubAuthProvider,\r\n//   GoogleAuthProvider,\r\n//   UserCredential,\r\n//   authState,\r\n//   createUserWithEmailAndPassword,\r\n//   signInWithEmailAndPassword,\r\n//   signInWithPopup,\r\n// } from '@angular/fire/auth';\r\n\r\n// export interface Credential {\r\n//   email: string;\r\n//   password: string;\r\n// }\r\n\r\n// @Injectable({\r\n//   providedIn: 'root',\r\n// })\r\n// export class AuthService {\r\n//   private auth: Auth = inject(Auth);\r\n\r\n//   readonly authState$ = authState(this.auth);\r\n\r\n//   signUpWithEmailAndPassword(credential: Credential): Promise<UserCredential> {\r\n//     return createUserWithEmailAndPassword(\r\n//       this.auth,\r\n//       credential.email,\r\n//       credential.password\r\n//     );\r\n//   }\r\n\r\n//   logInWithEmailAndPassword(credential: Credential) {\r\n//     return signInWithEmailAndPassword(\r\n//       this.auth,\r\n//       credential.email,\r\n//       credential.password\r\n//     );\r\n//   }\r\n\r\n//   logOut(): Promise<void> {\r\n//     return this.auth.signOut();\r\n//   }\r\n\r\n//   // providers\r\n\r\n//   signInWithGoogleProvider(): Promise<UserCredential> {\r\n//     const provider = new GoogleAuthProvider();\r\n\r\n//     return this.callPopUp(provider);\r\n//   }\r\n\r\n//   signInWithGithubProvider(): Promise<UserCredential> {\r\n//     const provider = new GithubAuthProvider();\r\n\r\n//     return this.callPopUp(provider);\r\n//   }\r\n\r\n//   async callPopUp(provider: AuthProvider): Promise<UserCredential> {\r\n//     try {\r\n//       const result = await signInWithPopup(this.auth, provider);\r\n\r\n//       return result;\r\n//     } catch (error: any) {\r\n//       return error;\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n// ---------------------------------\r\n\r\n// auth.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport { auth } from  '@angular/fire/auth';\r\n\r\nexport interface Credential {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  constructor(private afAuth: AngularFireAuth) {}\r\n\r\n  signUpWithEmailAndPassword(credential: Credential) {\r\n    return this.afAuth.createUserWithEmailAndPassword(\r\n      credential.email,\r\n      credential.password\r\n    );\r\n  }\r\n\r\n  signInWithEmailAndPassword(credential: Credential) {\r\n    return this.afAuth.signInWithEmailAndPassword(\r\n      credential.email,\r\n      credential.password\r\n    );\r\n  }\r\n\r\n  signOut() {\r\n    return this.afAuth.signOut();\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA,SAASA,UAAU,QAAQ,eAAe;AAYnC,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EACtBC,YAAoBC,MAAuB;IAAvB,KAAAA,MAAM,GAANA,MAAM;EAAoB;EAE9CC,0BAA0BA,CAACC,UAAsB;IAC/C,OAAO,IAAI,CAACF,MAAM,CAACG,8BAA8B,CAC/CD,UAAU,CAACE,KAAK,EAChBF,UAAU,CAACG,QAAQ,CACpB;EACH;EAEAC,0BAA0BA,CAACJ,UAAsB;IAC/C,OAAO,IAAI,CAACF,MAAM,CAACM,0BAA0B,CAC3CJ,UAAU,CAACE,KAAK,EAChBF,UAAU,CAACG,QAAQ,CACpB;EACH;EAEAE,OAAOA,CAAA;IACL,OAAO,IAAI,CAACP,MAAM,CAACO,OAAO,EAAE;EAC9B;CACD;AApBYT,WAAW,GAAAU,UAAA,EAHvBX,UAAU,CAAC;EACVY,UAAU,EAAE;CACb,CAAC,C,EACWX,WAAW,CAoBvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}