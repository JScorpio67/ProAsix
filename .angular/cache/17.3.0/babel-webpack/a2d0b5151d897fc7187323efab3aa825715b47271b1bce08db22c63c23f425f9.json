{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ASUS/Documents/GitHub/ProAsix/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// import { Component, inject, OnInit } from '@angular/core';\n// import { CommonModule } from '@angular/common';\n// import {\n//   FormBuilder,\n//   FormControl,\n//   FormGroup,\n//   ReactiveFormsModule,\n//   Validators,\n// } from '@angular/forms';\n// import { MatFormFieldModule } from '@angular/material/form-field';\n// import { MatInputModule } from '@angular/material/input';\n// import { MatIconModule } from '@angular/material/icon';\n// import { MatButtonModule } from '@angular/material/button';\n// import { Router, RouterModule } from '@angular/router';\n// // import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\n// //import { AuthService, Credential } from '../../../core/services/auth.service';\n// // import { ButtonProviders } from '../components/button-providers/button-providers.component';\n// interface interfaceLoginForm{\n//   email: FormControl<string>;\n//   password: FormControl<string>;\n// }\n// @Component({\n//   standalone: true,\n//   imports:[\n//     MatFormFieldModule,\n//     MatInputModule,\n//     MatIconModule,\n//     MatButtonModule,\n//     ReactiveFormsModule,\n//     RouterModule,\n//     CommonModule,\n//     // MatSnackBarModule,\n//     // ButtonProviders\n//   ],\n//   selector: 'loginForm',\n//   templateUrl: './form-login.component.html',\n//   styleUrls: ['./form-login.component.css']\n// })\n// export default class NewLoginComponent implements OnInit {\n//   hide = true;\n//   formBuilder = inject(FormBuilder);\n//   // private authService = inject(AuthService);\n//   // private router = inject(Router);\n//   // private _snackBar = inject(MatSnackBar);\n//   formularioHTML: FormGroup<interfaceLoginForm> = this.formBuilder.group({\n//     email: this.formBuilder.control('', {\n//       validators: [Validators.required, Validators.email],\n//       nonNullable: true,\n//     }),\n//     password: this.formBuilder.control('', {\n//       validators: Validators.required,\n//       nonNullable: true,\n//     }),\n//   });\n//   logIn(): void {\n//     if (this.formularioHTML.invalid) return;\n//     console.log(this.formularioHTML.value)\n//   }\n//   // get isEmailValid(): string | boolean {\n//   //   const control = this.form.get('email');\n//   //   const isInvalid = control?.invalid && control.touched;\n//   //   if (isInvalid) {\n//   //     return control.hasError('required')\n//   //       ? 'This field is required'\n//   //       : 'Enter a valid email';\n//   //   }\n//   //   return false;\n//   // }\n//   // async logIn(): Promise<void> {\n//   //   if (this.form.invalid) return;\n//   //   const credential: Credential = {\n//   //     email: this.form.value.email || '',\n//   //     password: this.form.value.password || '',\n//   //   };\n//   //   try {\n//   //     await this.authService.logInWithEmailAndPassword(credential);\n//   //     const snackBarRef = this.openSnackBar();\n//   //     snackBarRef.afterDismissed().subscribe(() => {\n//   //       this.router.navigateByUrl('/');\n//   //     });\n//   //   } catch (error) {\n//   //     console.error(error);\n//   //   }\n//   // }\n//   // openSnackBar() {\n//   //   return this._snackBar.open('Succesfully Log in ðŸ˜€', 'Close', {\n//   //     duration: 2500,\n//   //     verticalPosition: 'top',\n//   //     horizontalPosition: 'end',\n//   //   });\n//   // }\n//   // sin comentar\n//   constructor() { }\n//   ngOnInit() { }\n// }\n// --------------------------------------------------------------------------\nimport { inject } from '@angular/core';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { NgIf } from '@angular/common';\nimport { Router, RouterModule } from '@angular/router';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/form-field\";\nimport * as i2 from \"@angular/material/input\";\nimport * as i3 from \"@angular/material/icon\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/router\";\nfunction LogInComponent_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"mat-error\");\n    i0.ÉµÉµtext(1);\n    i0.ÉµÉµelementEnd();\n  }\n  if (rf & 2) {\n    const messsage_r1 = ctx.ngIf;\n    i0.ÉµÉµadvance();\n    i0.ÉµÉµtextInterpolate(messsage_r1);\n  }\n}\nexport default class LogInComponent {\n  constructor() {\n    this.hide = true;\n    this.formBuilder = inject(FormBuilder);\n    // private authService = inject(AuthService);\n    this.router = inject(Router);\n    this._snackBar = inject(MatSnackBar);\n    this.formularioHTML = this.formBuilder.group({\n      email: this.formBuilder.control('', {\n        validators: [Validators.required, Validators.email],\n        nonNullable: true\n      }),\n      password: this.formBuilder.control('', {\n        validators: Validators.required,\n        nonNullable: true\n      })\n    });\n  }\n  get isEmailValid() {\n    const control = this.formularioHTML.get('email');\n    const isInvalid = control?.invalid && control.touched;\n    if (isInvalid) {\n      return control.hasError('required') ? 'This field is required' : 'Enter a valid email';\n    }\n    return false;\n  }\n  logIn() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.formularioHTML.invalid) return;\n      const credential = {\n        email: _this.formularioHTML.value.email || '',\n        password: _this.formularioHTML.value.password || ''\n      };\n      // try {\n      //   await this.authService.logInWithEmailAndPassword(credential);\n      //   const snackBarRef = this.openSnackBar();\n      //   snackBarRef.afterDismissed().subscribe(() => {\n      //     this.router.navigateByUrl('/');\n      //   });\n      // } catch (error) {\n      //   console.error(error);\n      // }\n    })();\n  }\n  openSnackBar() {\n    return this._snackBar.open('Succesfully Log in ðŸ˜€', 'Close', {\n      duration: 2500,\n      verticalPosition: 'top',\n      horizontalPosition: 'end'\n    });\n  }\n  static #_ = this.Éµfac = function LogInComponent_Factory(t) {\n    return new (t || LogInComponent)();\n  };\n  static #_2 = this.Éµcmp = /*@__PURE__*/i0.ÉµÉµdefineComponent({\n    type: LogInComponent,\n    selectors: [[\"app-log-in\"]],\n    standalone: true,\n    features: [i0.ÉµÉµProvidersFeature([]), i0.ÉµÉµStandaloneFeature],\n    decls: 31,\n    vars: 6,\n    consts: [[1, \"form\"], [1, \"form__container\"], [3, \"ngSubmit\", \"formGroup\"], [\"matInput\", \"\", \"formControlName\", \"email\"], [4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"password\", 3, \"type\"], [\"mat-icon-button\", \"\", \"matSuffix\", \"\", 3, \"click\"], [\"mat-flat-button\", \"\", \"color\", \"accent\", \"type\", \"submit\"], [1, \"small-text\", \"providers\"], [1, \"small-text\", \"log-in-redirect\"], [\"routerLink\", \"auth/signupForm\"]],\n    template: function LogInComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ÉµÉµelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\");\n        i0.ÉµÉµtext(3, \"Log in\");\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelementStart(4, \"form\", 2);\n        i0.ÉµÉµlistener(\"ngSubmit\", function LogInComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.logIn();\n        });\n        i0.ÉµÉµelementStart(5, \"div\")(6, \"mat-form-field\")(7, \"mat-label\");\n        i0.ÉµÉµtext(8, \"Email\");\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelement(9, \"input\", 3);\n        i0.ÉµÉµtemplate(10, LogInComponent_mat_error_10_Template, 2, 1, \"mat-error\", 4);\n        i0.ÉµÉµelementEnd()();\n        i0.ÉµÉµelementStart(11, \"div\")(12, \"mat-form-field\")(13, \"mat-label\");\n        i0.ÉµÉµtext(14, \"Introduce tu contrase\\u00F1a\");\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelement(15, \"input\", 5);\n        i0.ÉµÉµelementStart(16, \"button\", 6);\n        i0.ÉµÉµlistener(\"click\", function LogInComponent_Template_button_click_16_listener() {\n          return ctx.hide = !ctx.hide;\n        });\n        i0.ÉµÉµelementStart(17, \"mat-icon\");\n        i0.ÉµÉµtext(18);\n        i0.ÉµÉµelementEnd()();\n        i0.ÉµÉµelementStart(19, \"mat-error\");\n        i0.ÉµÉµtext(20, \"Este campo es obligatorio\");\n        i0.ÉµÉµelementEnd()()();\n        i0.ÉµÉµelementStart(21, \"div\")(22, \"button\", 7);\n        i0.ÉµÉµtext(23, \"Iniciar Sesi\\u00F3n\");\n        i0.ÉµÉµelementEnd()()();\n        i0.ÉµÉµelement(24, \"hr\");\n        i0.ÉµÉµelementStart(25, \"span\", 8);\n        i0.ÉµÉµtext(26, \"Have Google or GitHub?\");\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelementStart(27, \"span\", 9);\n        i0.ÉµÉµtext(28, \"No tienes una cuenta? Registrate \");\n        i0.ÉµÉµelementStart(29, \"a\", 10);\n        i0.ÉµÉµtext(30, \"Registrarse\");\n        i0.ÉµÉµelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ÉµÉµadvance(4);\n        i0.ÉµÉµproperty(\"formGroup\", ctx.formularioHTML);\n        i0.ÉµÉµadvance(6);\n        i0.ÉµÉµproperty(\"ngIf\", ctx.isEmailValid);\n        i0.ÉµÉµadvance(5);\n        i0.ÉµÉµproperty(\"type\", ctx.hide ? \"password\" : \"text\");\n        i0.ÉµÉµadvance();\n        i0.ÉµÉµattribute(\"aria-label\", \"Hide password\")(\"aria-pressed\", ctx.hide);\n        i0.ÉµÉµadvance(2);\n        i0.ÉµÉµtextInterpolate(ctx.hide ? \"visibility_off\" : \"visibility\");\n      }\n    },\n    dependencies: [MatFormFieldModule, i1.MatFormField, i1.MatLabel, i1.MatError, i1.MatSuffix, MatInputModule, i2.MatInput, MatIconModule, i3.MatIcon, MatButtonModule, i4.MatButton, i4.MatIconButton, ReactiveFormsModule, i5.ÉµNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName, RouterModule, i6.RouterLink, NgIf, MatSnackBarModule],\n    styles: [\"[_ngcontent-%COMP%]:root {\\n    --primary-color: #1e1e1e;   \\n\\n    --secondary-color: #333333; \\n\\n    --accent-color: #6200ea;    \\n\\n    --text-color: #ffffff;      \\n\\n    --error-color: #ff5252;     \\n\\n  }\\n  \\n  body[_ngcontent-%COMP%] {\\n    background-color: var(--primary-color);\\n    color: var(--text-color);\\n    font-family: Arial, sans-serif;\\n  }\\n  \\n  .form[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 100vh;\\n  }\\n  \\n  .form__container[_ngcontent-%COMP%] {\\n    background-color: var(--secondary-color);\\n    padding: 2rem;\\n    border-radius: 8px;\\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\\n    max-width: 400px;\\n    width: 100%;\\n    text-align: center;\\n  }\\n  \\n  h1[_ngcontent-%COMP%] {\\n    margin-bottom: 1.5rem;\\n    color: var(--accent-color);\\n  }\\n  \\n  mat-form-field[_ngcontent-%COMP%] {\\n    width: 100%;\\n    margin-bottom: 1.5rem;\\n  }\\n  \\n  input[matInput][_ngcontent-%COMP%] {\\n    color: var(--text-color);\\n  }\\n  \\n  mat-icon[_ngcontent-%COMP%] {\\n    color: var(--text-color);\\n  }\\n  \\n  mat-error[_ngcontent-%COMP%] {\\n    color: var(--error-color);\\n  }\\n  \\n  button[_ngcontent-%COMP%] {\\n    width: 100%;\\n    padding: 0.75rem;\\n    margin-top: 1rem;\\n  }\\n  \\n  hr[_ngcontent-%COMP%] {\\n    margin: 2rem 0;\\n    border: none;\\n    border-top: 1px solid var(--accent-color);\\n  }\\n  \\n  .small-text[_ngcontent-%COMP%] {\\n    color: var(--text-color);\\n    font-size: 0.875rem;\\n  }\\n  \\n  a[_ngcontent-%COMP%] {\\n    color: var(--accent-color);\\n    text-decoration: none;\\n  }\\n  \\n  a[_ngcontent-%COMP%]:hover {\\n    text-decoration: underline;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXV0aC9mb3JtLWxvZ2luL2Zvcm0tbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7SUFDSSx3QkFBd0IsSUFBSSxpQkFBaUI7SUFDN0MsMEJBQTBCLEVBQUUscUJBQXFCO0lBQ2pELHVCQUF1QixLQUFLLG9CQUFvQjtJQUNoRCxxQkFBcUIsT0FBTyxtQkFBbUI7SUFDL0Msc0JBQXNCLE1BQU0sbUJBQW1CO0VBQ2pEOztFQUVBO0lBQ0Usc0NBQXNDO0lBQ3RDLHdCQUF3QjtJQUN4Qiw4QkFBOEI7RUFDaEM7O0VBRUE7SUFDRSxhQUFhO0lBQ2IsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtJQUNuQixhQUFhO0VBQ2Y7O0VBRUE7SUFDRSx3Q0FBd0M7SUFDeEMsYUFBYTtJQUNiLGtCQUFrQjtJQUNsQix3Q0FBd0M7SUFDeEMsZ0JBQWdCO0lBQ2hCLFdBQVc7SUFDWCxrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxxQkFBcUI7SUFDckIsMEJBQTBCO0VBQzVCOztFQUVBO0lBQ0UsV0FBVztJQUNYLHFCQUFxQjtFQUN2Qjs7RUFFQTtJQUNFLHdCQUF3QjtFQUMxQjs7RUFFQTtJQUNFLHdCQUF3QjtFQUMxQjs7RUFFQTtJQUNFLHlCQUF5QjtFQUMzQjs7RUFFQTtJQUNFLFdBQVc7SUFDWCxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0VBQ2xCOztFQUVBO0lBQ0UsY0FBYztJQUNkLFlBQVk7SUFDWix5Q0FBeUM7RUFDM0M7O0VBRUE7SUFDRSx3QkFBd0I7SUFDeEIsbUJBQW1CO0VBQ3JCOztFQUVBO0lBQ0UsMEJBQTBCO0lBQzFCLHFCQUFxQjtFQUN2Qjs7RUFFQTtJQUNFLDBCQUEwQjtFQUM1QiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG46cm9vdCB7XHJcbiAgICAtLXByaW1hcnktY29sb3I6ICMxZTFlMWU7ICAgLyogRm9uZG8gb3NjdXJvICovXHJcbiAgICAtLXNlY29uZGFyeS1jb2xvcjogIzMzMzMzMzsgLyogQ29sb3Igc2VjdW5kYXJpbyAqL1xyXG4gICAgLS1hY2NlbnQtY29sb3I6ICM2MjAwZWE7ICAgIC8qIENvbG9yIGRlIGFjZW50byAqL1xyXG4gICAgLS10ZXh0LWNvbG9yOiAjZmZmZmZmOyAgICAgIC8qIENvbG9yIGRlIHRleHRvICovXHJcbiAgICAtLWVycm9yLWNvbG9yOiAjZmY1MjUyOyAgICAgLyogQ29sb3IgZGUgZXJyb3IgKi9cclxuICB9XHJcbiAgXHJcbiAgYm9keSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcclxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yKTtcclxuICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjtcclxuICB9XHJcbiAgXHJcbiAgLmZvcm0ge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGhlaWdodDogMTAwdmg7XHJcbiAgfVxyXG4gIFxyXG4gIC5mb3JtX19jb250YWluZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2Vjb25kYXJ5LWNvbG9yKTtcclxuICAgIHBhZGRpbmc6IDJyZW07XHJcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XHJcbiAgICBib3gtc2hhZG93OiAwIDRweCA4cHggcmdiYSgwLCAwLCAwLCAwLjIpO1xyXG4gICAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuICBcclxuICBoMSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxLjVyZW07XHJcbiAgICBjb2xvcjogdmFyKC0tYWNjZW50LWNvbG9yKTtcclxuICB9XHJcbiAgXHJcbiAgbWF0LWZvcm0tZmllbGQge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxLjVyZW07XHJcbiAgfVxyXG4gIFxyXG4gIGlucHV0W21hdElucHV0XSB7XHJcbiAgICBjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7XHJcbiAgfVxyXG4gIFxyXG4gIG1hdC1pY29uIHtcclxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yKTtcclxuICB9XHJcbiAgXHJcbiAgbWF0LWVycm9yIHtcclxuICAgIGNvbG9yOiB2YXIoLS1lcnJvci1jb2xvcik7XHJcbiAgfVxyXG4gIFxyXG4gIGJ1dHRvbiB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHBhZGRpbmc6IDAuNzVyZW07XHJcbiAgICBtYXJnaW4tdG9wOiAxcmVtO1xyXG4gIH1cclxuICBcclxuICBociB7XHJcbiAgICBtYXJnaW46IDJyZW0gMDtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1hY2NlbnQtY29sb3IpO1xyXG4gIH1cclxuICBcclxuICAuc21hbGwtdGV4dCB7XHJcbiAgICBjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7XHJcbiAgICBmb250LXNpemU6IDAuODc1cmVtO1xyXG4gIH1cclxuICBcclxuICBhIHtcclxuICAgIGNvbG9yOiB2YXIoLS1hY2NlbnQtY29sb3IpO1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gIH1cclxuICBcclxuICBhOmhvdmVyIHtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xyXG4gIH1cclxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["inject","FormBuilder","ReactiveFormsModule","Validators","NgIf","Router","RouterModule","MatFormFieldModule","MatInputModule","MatIconModule","MatButtonModule","MatSnackBar","MatSnackBarModule","i0","ÉµÉµelementStart","ÉµÉµtext","ÉµÉµelementEnd","ÉµÉµadvance","ÉµÉµtextInterpolate","messsage_r1","LogInComponent","constructor","hide","formBuilder","router","_snackBar","formularioHTML","group","email","control","validators","required","nonNullable","password","isEmailValid","get","isInvalid","invalid","touched","hasError","logIn","_this","_asyncToGenerator","credential","value","openSnackBar","open","duration","verticalPosition","horizontalPosition","_","_2","selectors","standalone","features","ÉµÉµProvidersFeature","ÉµÉµStandaloneFeature","decls","vars","consts","template","LogInComponent_Template","rf","ctx","ÉµÉµlistener","LogInComponent_Template_form_ngSubmit_4_listener","ÉµÉµelement","ÉµÉµtemplate","LogInComponent_mat_error_10_Template","LogInComponent_Template_button_click_16_listener","ÉµÉµproperty","i1","MatFormField","MatLabel","MatError","MatSuffix","i2","MatInput","i3","MatIcon","i4","MatButton","MatIconButton","i5","ÉµNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","i6","RouterLink","styles"],"sources":["C:\\Users\\ASUS\\Documents\\GitHub\\ProAsix\\src\\app\\auth\\form-login\\form-login.ts","C:\\Users\\ASUS\\Documents\\GitHub\\ProAsix\\src\\app\\auth\\form-login\\form-login.component.html"],"sourcesContent":["// import { Component, inject, OnInit } from '@angular/core';\r\n// import { CommonModule } from '@angular/common';\r\n// import {\r\n//   FormBuilder,\r\n//   FormControl,\r\n//   FormGroup,\r\n//   ReactiveFormsModule,\r\n//   Validators,\r\n// } from '@angular/forms';\r\n\r\n\r\n// import { MatFormFieldModule } from '@angular/material/form-field';\r\n// import { MatInputModule } from '@angular/material/input';\r\n// import { MatIconModule } from '@angular/material/icon';\r\n// import { MatButtonModule } from '@angular/material/button';\r\n// import { Router, RouterModule } from '@angular/router';\r\n\r\n\r\n\r\n// // import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\r\n// //import { AuthService, Credential } from '../../../core/services/auth.service';\r\n// // import { ButtonProviders } from '../components/button-providers/button-providers.component';\r\n\r\n\r\n// interface interfaceLoginForm{\r\n//   email: FormControl<string>;\r\n//   password: FormControl<string>;\r\n// }\r\n\r\n// @Component({\r\n//   standalone: true,\r\n//   imports:[\r\n//     MatFormFieldModule,\r\n//     MatInputModule,\r\n//     MatIconModule,\r\n//     MatButtonModule,\r\n//     ReactiveFormsModule,\r\n//     RouterModule,\r\n//     CommonModule,\r\n\r\n\r\n//     // MatSnackBarModule,\r\n//     // ButtonProviders\r\n//   ],\r\n//   selector: 'loginForm',\r\n//   templateUrl: './form-login.component.html',\r\n//   styleUrls: ['./form-login.component.css']\r\n// })\r\n\r\n// export default class NewLoginComponent implements OnInit {\r\n//   hide = true;\r\n\r\n//   formBuilder = inject(FormBuilder);\r\n\r\n\r\n\r\n//   // private authService = inject(AuthService);\r\n\r\n//   // private router = inject(Router);\r\n\r\n//   // private _snackBar = inject(MatSnackBar);\r\n\r\n//   formularioHTML: FormGroup<interfaceLoginForm> = this.formBuilder.group({\r\n//     email: this.formBuilder.control('', {\r\n//       validators: [Validators.required, Validators.email],\r\n//       nonNullable: true,\r\n//     }),\r\n//     password: this.formBuilder.control('', {\r\n//       validators: Validators.required,\r\n//       nonNullable: true,\r\n//     }),\r\n//   });\r\n\r\n//   logIn(): void {\r\n//     if (this.formularioHTML.invalid) return;\r\n//     console.log(this.formularioHTML.value)\r\n//   }\r\n\r\n\r\n\r\n\r\n//   // get isEmailValid(): string | boolean {\r\n//   //   const control = this.form.get('email');\r\n\r\n//   //   const isInvalid = control?.invalid && control.touched;\r\n\r\n//   //   if (isInvalid) {\r\n//   //     return control.hasError('required')\r\n//   //       ? 'This field is required'\r\n//   //       : 'Enter a valid email';\r\n//   //   }\r\n\r\n//   //   return false;\r\n//   // }\r\n\r\n//   // async logIn(): Promise<void> {\r\n//   //   if (this.form.invalid) return;\r\n\r\n//   //   const credential: Credential = {\r\n//   //     email: this.form.value.email || '',\r\n//   //     password: this.form.value.password || '',\r\n//   //   };\r\n\r\n//   //   try {\r\n//   //     await this.authService.logInWithEmailAndPassword(credential);\r\n//   //     const snackBarRef = this.openSnackBar();\r\n\r\n//   //     snackBarRef.afterDismissed().subscribe(() => {\r\n//   //       this.router.navigateByUrl('/');\r\n//   //     });\r\n//   //   } catch (error) {\r\n//   //     console.error(error);\r\n//   //   }\r\n//   // }\r\n\r\n//   // openSnackBar() {\r\n//   //   return this._snackBar.open('Succesfully Log in ðŸ˜€', 'Close', {\r\n//   //     duration: 2500,\r\n//   //     verticalPosition: 'top',\r\n//   //     horizontalPosition: 'end',\r\n//   //   });\r\n//   // }\r\n\r\n\r\n\r\n//   // sin comentar\r\n//   constructor() { }\r\n//   ngOnInit() { }\r\n// }\r\n\r\n// --------------------------------------------------------------------------\r\n\r\nimport { Component, inject } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { NgIf } from '@angular/common';\r\nimport { Router, RouterModule } from '@angular/router';\r\n\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\r\n// import { AuthService, Credential } from '../../../core/services/auth.service';\r\nimport { AuthService, Credential } from 'src/app/services/auth/firebase/auth.service';\r\n\r\n// import { ButtonProviders } from '../components/button-providers/button-providers.component';\r\nimport { ButtonProviders } from '../../services/auth/componentes/button-providers.component'\r\n\r\n\r\ninterface LogInForm {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\n@Component({\r\n  standalone: true,\r\n  imports: [\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n    NgIf,\r\n    MatSnackBarModule,\r\n    ButtonProviders,\r\n  ],\r\n  selector: 'app-log-in',\r\n  templateUrl: './form-login.component.html',\r\n  styleUrls: ['./form-login.component.css'],\r\n  providers: [],\r\n})\r\nexport default class LogInComponent {\r\n  hide = true;\r\n\r\n  formBuilder = inject(FormBuilder);\r\n\r\n  // private authService = inject(AuthService);\r\n\r\n  private router = inject(Router);\r\n\r\n  private _snackBar = inject(MatSnackBar);\r\n\r\n  formularioHTML: FormGroup<LogInForm> = this.formBuilder.group({\r\n    email: this.formBuilder.control('', {\r\n      validators: [Validators.required, Validators.email],\r\n      nonNullable: true,\r\n    }),\r\n    password: this.formBuilder.control('', {\r\n      validators: Validators.required,\r\n      nonNullable: true,\r\n    }),\r\n  });\r\n\r\n  get isEmailValid(): string | boolean {\r\n    const control = this.formularioHTML.get('email');\r\n\r\n    const isInvalid = control?.invalid && control.touched;\r\n\r\n    if (isInvalid) {\r\n      return control.hasError('required')\r\n        ? 'This field is required'\r\n        : 'Enter a valid email';\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  async logIn(): Promise<void> {\r\n    if (this.formularioHTML.invalid) return;\r\n\r\n    const credential: Credential = {\r\n      email: this.formularioHTML.value.email || '',\r\n      password: this.formularioHTML.value.password || '',\r\n    };\r\n\r\n    // try {\r\n    //   await this.authService.logInWithEmailAndPassword(credential);\r\n    //   const snackBarRef = this.openSnackBar();\r\n\r\n    //   snackBarRef.afterDismissed().subscribe(() => {\r\n    //     this.router.navigateByUrl('/');\r\n    //   });\r\n    // } catch (error) {\r\n    //   console.error(error);\r\n    // }\r\n  }\r\n\r\n  openSnackBar() {\r\n    return this._snackBar.open('Succesfully Log in ðŸ˜€', 'Close', {\r\n      duration: 2500,\r\n      verticalPosition: 'top',\r\n      horizontalPosition: 'end',\r\n    });\r\n  }\r\n}\r\n","<div class=\"form\">\r\n    <div class=\"form__container\">\r\n      <h1>Log in</h1>\r\n      <form [formGroup]=\"formularioHTML\" (ngSubmit)=\"logIn()\">\r\n        <div>\r\n          <mat-form-field>\r\n            <mat-label>Email</mat-label>\r\n            <input matInput formControlName=\"email\" />\r\n            <!-- comentar? -->\r\n            <mat-error *ngIf=\"isEmailValid as messsage\">{{ messsage }}</mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n  \r\n        <div>\r\n          <mat-form-field>\r\n            <mat-label>Introduce tu contraseÃ±a</mat-label>\r\n            <input\r\n              matInput\r\n              [type]=\"hide ? 'password' : 'text'\"\r\n              formControlName=\"password\"\r\n            />\r\n            <button\r\n              mat-icon-button\r\n              matSuffix\r\n              (click)=\"hide = !hide\"\r\n              [attr.aria-label]=\"'Hide password'\"\r\n              [attr.aria-pressed]=\"hide\"\r\n            >\r\n              <mat-icon>{{ hide ? \"visibility_off\" : \"visibility\" }}</mat-icon>\r\n            </button>\r\n            <mat-error>Este campo es obligatorio</mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n  \r\n        <div>\r\n          <button mat-flat-button color=\"accent\" type=\"submit\">Iniciar SesiÃ³n</button>\r\n        </div>\r\n      </form>\r\n      <hr />\r\n      <span class=\"small-text providers\">Have Google or GitHub?</span>\r\n      <!-- <app-button-providers [isLogin]=\"true\" /> -->\r\n      <span class=\"small-text log-in-redirect\"\r\n        >No tienes una cuenta? Registrate\r\n        <a routerLink=\"auth/signupForm\">Registrarse</a></span\r\n      >\r\n    </div>\r\n  </div>\r\n  "],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA,SAAoBA,MAAM,QAAQ,eAAe;AACjD,SACEC,WAAW,EAGXC,mBAAmB,EACnBC,UAAU,QACL,gBAAgB;AACvB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,MAAM,EAAEC,YAAY,QAAQ,iBAAiB;AAEtD,SAASC,kBAAkB,QAAQ,8BAA8B;AACjE,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,WAAW,EAAEC,iBAAiB,QAAQ,6BAA6B;;;;;;;;;;IC1IhEC,EAAA,CAAAC,cAAA,gBAA4C;IAAAD,EAAA,CAAAE,MAAA,GAAc;IAAAF,EAAA,CAAAG,YAAA,EAAY;;;;IAA1BH,EAAA,CAAAI,SAAA,EAAc;IAAdJ,EAAA,CAAAK,iBAAA,CAAAC,WAAA,CAAc;;;ADyKtE,eAAc,MAAOC,cAAc;EAlBnCC,YAAA;IAmBE,KAAAC,IAAI,GAAG,IAAI;IAEX,KAAAC,WAAW,GAAGvB,MAAM,CAACC,WAAW,CAAC;IAEjC;IAEQ,KAAAuB,MAAM,GAAGxB,MAAM,CAACK,MAAM,CAAC;IAEvB,KAAAoB,SAAS,GAAGzB,MAAM,CAACW,WAAW,CAAC;IAEvC,KAAAe,cAAc,GAAyB,IAAI,CAACH,WAAW,CAACI,KAAK,CAAC;MAC5DC,KAAK,EAAE,IAAI,CAACL,WAAW,CAACM,OAAO,CAAC,EAAE,EAAE;QAClCC,UAAU,EAAE,CAAC3B,UAAU,CAAC4B,QAAQ,EAAE5B,UAAU,CAACyB,KAAK,CAAC;QACnDI,WAAW,EAAE;OACd,CAAC;MACFC,QAAQ,EAAE,IAAI,CAACV,WAAW,CAACM,OAAO,CAAC,EAAE,EAAE;QACrCC,UAAU,EAAE3B,UAAU,CAAC4B,QAAQ;QAC/BC,WAAW,EAAE;OACd;KACF,CAAC;;EAEF,IAAIE,YAAYA,CAAA;IACd,MAAML,OAAO,GAAG,IAAI,CAACH,cAAc,CAACS,GAAG,CAAC,OAAO,CAAC;IAEhD,MAAMC,SAAS,GAAGP,OAAO,EAAEQ,OAAO,IAAIR,OAAO,CAACS,OAAO;IAErD,IAAIF,SAAS,EAAE;MACb,OAAOP,OAAO,CAACU,QAAQ,CAAC,UAAU,CAAC,GAC/B,wBAAwB,GACxB,qBAAqB;IAC3B;IAEA,OAAO,KAAK;EACd;EAEMC,KAAKA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACT,IAAID,KAAI,CAACf,cAAc,CAACW,OAAO,EAAE;MAEjC,MAAMM,UAAU,GAAe;QAC7Bf,KAAK,EAAEa,KAAI,CAACf,cAAc,CAACkB,KAAK,CAAChB,KAAK,IAAI,EAAE;QAC5CK,QAAQ,EAAEQ,KAAI,CAACf,cAAc,CAACkB,KAAK,CAACX,QAAQ,IAAI;OACjD;MAED;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;IAAA;EACF;EAEAY,YAAYA,CAAA;IACV,OAAO,IAAI,CAACpB,SAAS,CAACqB,IAAI,CAAC,uBAAuB,EAAE,OAAO,EAAE;MAC3DC,QAAQ,EAAE,IAAI;MACdC,gBAAgB,EAAE,KAAK;MACvBC,kBAAkB,EAAE;KACrB,CAAC;EACJ;EAAC,QAAAC,CAAA,G;qBA9DkB9B,cAAc;EAAA;EAAA,QAAA+B,EAAA,G;UAAd/B,cAAc;IAAAgC,SAAA;IAAAC,UAAA;IAAAC,QAAA,GAAAzC,EAAA,CAAA0C,kBAAA,CAFtB,EAAE,GAAA1C,EAAA,CAAA2C,mBAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QC9KTjD,EAFN,CAAAC,cAAA,aAAkB,aACe,SACvB;QAAAD,EAAA,CAAAE,MAAA,aAAM;QAAAF,EAAA,CAAAG,YAAA,EAAK;QACfH,EAAA,CAAAC,cAAA,cAAwD;QAArBD,EAAA,CAAAmD,UAAA,sBAAAC,iDAAA;UAAA,OAAYF,GAAA,CAAAvB,KAAA,EAAO;QAAA,EAAC;QAGjD3B,EAFJ,CAAAC,cAAA,UAAK,qBACa,gBACH;QAAAD,EAAA,CAAAE,MAAA,YAAK;QAAAF,EAAA,CAAAG,YAAA,EAAY;QAC5BH,EAAA,CAAAqD,SAAA,eAA0C;QAE1CrD,EAAA,CAAAsD,UAAA,KAAAC,oCAAA,uBAA4C;QAEhDvD,EADE,CAAAG,YAAA,EAAiB,EACb;QAIFH,EAFJ,CAAAC,cAAA,WAAK,sBACa,iBACH;QAAAD,EAAA,CAAAE,MAAA,oCAAuB;QAAAF,EAAA,CAAAG,YAAA,EAAY;QAC9CH,EAAA,CAAAqD,SAAA,gBAIE;QACFrD,EAAA,CAAAC,cAAA,iBAMC;QAHCD,EAAA,CAAAmD,UAAA,mBAAAK,iDAAA;UAAA,OAAAN,GAAA,CAAAzC,IAAA,IAAAyC,GAAA,CAAAzC,IAAA;QAAA,EAAsB;QAItBT,EAAA,CAAAC,cAAA,gBAAU;QAAAD,EAAA,CAAAE,MAAA,IAA4C;QACxDF,EADwD,CAAAG,YAAA,EAAW,EAC1D;QACTH,EAAA,CAAAC,cAAA,iBAAW;QAAAD,EAAA,CAAAE,MAAA,iCAAyB;QAExCF,EAFwC,CAAAG,YAAA,EAAY,EACjC,EACb;QAGJH,EADF,CAAAC,cAAA,WAAK,iBACkD;QAAAD,EAAA,CAAAE,MAAA,2BAAc;QAEvEF,EAFuE,CAAAG,YAAA,EAAS,EACxE,EACD;QACPH,EAAA,CAAAqD,SAAA,UAAM;QACNrD,EAAA,CAAAC,cAAA,eAAmC;QAAAD,EAAA,CAAAE,MAAA,8BAAsB;QAAAF,EAAA,CAAAG,YAAA,EAAO;QAEhEH,EAAA,CAAAC,cAAA,eACG;QAAAD,EAAA,CAAAE,MAAA,yCACD;QAAAF,EAAA,CAAAC,cAAA,aAAgC;QAAAD,EAAA,CAAAE,MAAA,mBAAW;QAGjDF,EAHiD,CAAAG,YAAA,EAAI,EAChD,EACG,EACF;;;QA3CIH,EAAA,CAAAI,SAAA,GAA4B;QAA5BJ,EAAA,CAAAyD,UAAA,cAAAP,GAAA,CAAArC,cAAA,CAA4B;QAMhBb,EAAA,CAAAI,SAAA,GAAmB;QAAnBJ,EAAA,CAAAyD,UAAA,SAAAP,GAAA,CAAA7B,YAAA,CAAmB;QAS7BrB,EAAA,CAAAI,SAAA,GAAmC;QAAnCJ,EAAA,CAAAyD,UAAA,SAAAP,GAAA,CAAAzC,IAAA,uBAAmC;QAOnCT,EAAA,CAAAI,SAAA,EAAmC;;QAGzBJ,EAAA,CAAAI,SAAA,GAA4C;QAA5CJ,EAAA,CAAAK,iBAAA,CAAA6C,GAAA,CAAAzC,IAAA,mCAA4C;;;mBDuIhEf,kBAAkB,EAAAgE,EAAA,CAAAC,YAAA,EAAAD,EAAA,CAAAE,QAAA,EAAAF,EAAA,CAAAG,QAAA,EAAAH,EAAA,CAAAI,SAAA,EAClBnE,cAAc,EAAAoE,EAAA,CAAAC,QAAA,EACdpE,aAAa,EAAAqE,EAAA,CAAAC,OAAA,EACbrE,eAAe,EAAAsE,EAAA,CAAAC,SAAA,EAAAD,EAAA,CAAAE,aAAA,EACfhF,mBAAmB,EAAAiF,EAAA,CAAAC,aAAA,EAAAD,EAAA,CAAAE,oBAAA,EAAAF,EAAA,CAAAG,eAAA,EAAAH,EAAA,CAAAI,oBAAA,EAAAJ,EAAA,CAAAK,kBAAA,EAAAL,EAAA,CAAAM,eAAA,EACnBnF,YAAY,EAAAoF,EAAA,CAAAC,UAAA,EACZvF,IAAI,EACJQ,iBAAiB;IAAAgF,MAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}