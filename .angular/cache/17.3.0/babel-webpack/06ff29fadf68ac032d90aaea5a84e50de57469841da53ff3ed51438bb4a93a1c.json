{"ast":null,"code":"\"use strict\";\n\n// import { Injectable } from '@angular/core';\n// import { LoginRequest } from './loginRequest';\n// import { HttpClient, HttpErrorResponse } from '@angular/common/http';\n// import { Observable, catchError, throwError, BehaviorSubject, tap } from 'rxjs'; \n// import { User } from '../user';\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class LoginService {\n//   //DEFINICION DE LOS BEHAVIOUR SUBJECTS\n//   currentUserLoginOn: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n//   currentUserData: BehaviorSubject<User> = new BehaviorSubject<User>({id:0, email:''});\n//   constructor(private http: HttpClient) { }\n//   //CREAMOS EL METODO LOGIN\n//   //login(formulario_input:any){ //any es muy generico\n//   login(formulario_input:LoginRequest): Observable<User> {\n//     //src/assets/data.json\n//     //url de donde cogemos los datos del usuario\n//     return this.http.get<User>('././assets/data.json').pipe(\n//       //TAP PARA EMITIR LA INFORMACION A LOS COMPONENTES SUSCRITOS\n//       tap( (userData : User) =>{\n//         this.currentUserData.next(userData);\n//         this.currentUserLoginOn.next(true);\n//       }),\n//       catchError(this.handlerError)\n//     );\n//   }\n//   //MANEJADOR DE ERRORES\n//   private handlerError(error:HttpErrorResponse){\n//     if (error.status===0){\n//       console.error('Se ha producido un error', error.error)\n//     } else {\n//       console.error('Backend retorno el codigo de estado', error.status, error.error);\n//       //retornamos la excepcion.\n//     } return throwError (()=> new Error('Algo falló, intente nuevamente'));\n//   }\n//   //SUSCRIBCION DE LOS COMPONENTES\n//   get userData():Observable<User>{\n//     return this.currentUserData.asObservable();\n//   }\n//   get userLoginOn():Observable<boolean>{\n//     return this.currentUserLoginOn.asObservable();\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\ASUS\\Documents\\GitHub\\ProAsix\\src\\app\\services\\auth\\login\\login.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\r\n// import { LoginRequest } from './loginRequest';\r\n// import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\n// import { Observable, catchError, throwError, BehaviorSubject, tap } from 'rxjs'; \r\n// import { User } from '../user';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class LoginService {\r\n//   //DEFINICION DE LOS BEHAVIOUR SUBJECTS\r\n//   currentUserLoginOn: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n//   currentUserData: BehaviorSubject<User> = new BehaviorSubject<User>({id:0, email:''});\r\n\r\n//   constructor(private http: HttpClient) { }\r\n//   //CREAMOS EL METODO LOGIN\r\n//   //login(formulario_input:any){ //any es muy generico\r\n//   login(formulario_input:LoginRequest): Observable<User> {\r\n//     //src/assets/data.json\r\n//     //url de donde cogemos los datos del usuario\r\n//     return this.http.get<User>('././assets/data.json').pipe(\r\n//       //TAP PARA EMITIR LA INFORMACION A LOS COMPONENTES SUSCRITOS\r\n//       tap( (userData : User) =>{\r\n//         this.currentUserData.next(userData);\r\n//         this.currentUserLoginOn.next(true);\r\n//       }),\r\n//       catchError(this.handlerError)\r\n//     );\r\n//   }\r\n\r\n//   //MANEJADOR DE ERRORES\r\n//   private handlerError(error:HttpErrorResponse){\r\n//     if (error.status===0){\r\n//       console.error('Se ha producido un error', error.error)\r\n//     } else {\r\n//       console.error('Backend retorno el codigo de estado', error.status, error.error);\r\n//       //retornamos la excepcion.\r\n//     } return throwError (()=> new Error('Algo falló, intente nuevamente'));\r\n//   }\r\n\r\n//   //SUSCRIBCION DE LOS COMPONENTES\r\n//   get userData():Observable<User>{\r\n//     return this.currentUserData.asObservable();\r\n//   }\r\n\r\n//   get userLoginOn():Observable<boolean>{\r\n//     return this.currentUserLoginOn.asObservable();\r\n//   }\r\n\r\n// }\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}