{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ASUS/Documents/GitHub/ProAsix/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// import { Injectable, inject } from '@angular/core'\n// import { Auth, authState } from '@angular/fire/auth';\n// import { \n//     AuthProvider,\n//     GithubAuthProvider,\n//     GoogleAuthProvider,\n//     UserCredential,\n//     createUserWithEmailAndPassword,\n//     signInWithEmailAndPassword,\n//     signInWithPopup,\n// } from 'firebase/auth';\n// //import { Auth } from 'firebase/auth';\n// export interface Credential {\n//     email:string;\n//     password:string;\n// }\n// @Injectable({\n//     providedIn: 'root'\n// })\n// export class AuthService{\n//     //inyeccion, doc firebase\n//     private auth: Auth = inject(Auth);\n//     readonly authState$ = authState(this.auth)\n//     signInWithEmailAndPassword(credencial:Credential): Promise<UserCredential>{\n//         //necesita el auth (inyectado), email (string) y pass(string)\n//         return createUserWithEmailAndPassword(\n//             this.auth,\n//             credencial.email,\n//             credencial.password\n//         )\n//     }\n//     loginEmailCont(credencial:Credential){\n//         return signInWithEmailAndPassword(\n//             this.auth,\n//             credencial.email,\n//             credencial.password\n//         )\n//     }\n//     // providers\n//     signInWithGoogleProvider(): Promise<UserCredential> {\n//         const provider = new GoogleAuthProvider();\n//         return this.callPopUp(provider);\n//     }\n//     signInWithGithubProvider(): Promise<UserCredential> {\n//         const provider = new GithubAuthProvider();\n//         return this.callPopUp(provider);\n//   }\n//   async callPopUp(provider: AuthProvider): Promise<UserCredential> {\n//     try {\n//       const result = await signInWithPopup(this.auth, provider);\n//       return result;\n//     } catch (error: any) {\n//       return error;\n//     }\n//   }\n// }\n// ---------------------------------\nimport { inject } from '@angular/core';\nimport { Auth, GithubAuthProvider, GoogleAuthProvider, authState, createUserWithEmailAndPassword, signInWithEmailAndPassword, signInWithPopup } from '@angular/fire/auth';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.auth = inject(Auth);\n    this.authState$ = authState(this.auth);\n  }\n  signUpWithEmailAndPassword(credential) {\n    return createUserWithEmailAndPassword(this.auth, credential.email, credential.password);\n  }\n  logInWithEmailAndPassword(credential) {\n    return signInWithEmailAndPassword(this.auth, credential.email, credential.password);\n  }\n  logOut() {\n    return this.auth.signOut();\n  }\n  // providers\n  signInWithGoogleProvider() {\n    const provider = new GoogleAuthProvider();\n    return this.callPopUp(provider);\n  }\n  signInWithGithubProvider() {\n    const provider = new GithubAuthProvider();\n    return this.callPopUp(provider);\n  }\n  callPopUp(provider) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const result = yield signInWithPopup(_this.auth, provider);\n        return result;\n      } catch (error) {\n        return error;\n      }\n    })();\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","Auth","GithubAuthProvider","GoogleAuthProvider","authState","createUserWithEmailAndPassword","signInWithEmailAndPassword","signInWithPopup","AuthService","constructor","auth","authState$","signUpWithEmailAndPassword","credential","email","password","logInWithEmailAndPassword","logOut","signOut","signInWithGoogleProvider","provider","callPopUp","signInWithGithubProvider","_this","_asyncToGenerator","result","error","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ASUS\\Documents\\GitHub\\ProAsix\\src\\app\\services\\auth\\firebase\\auth.service.ts"],"sourcesContent":["// import { Injectable, inject } from '@angular/core'\r\n// import { Auth, authState } from '@angular/fire/auth';\r\n// import { \r\n//     AuthProvider,\r\n//     GithubAuthProvider,\r\n//     GoogleAuthProvider,\r\n//     UserCredential,\r\n//     createUserWithEmailAndPassword,\r\n//     signInWithEmailAndPassword,\r\n//     signInWithPopup,\r\n// } from 'firebase/auth';\r\n// //import { Auth } from 'firebase/auth';\r\n\r\n// export interface Credential {\r\n//     email:string;\r\n//     password:string;\r\n// }\r\n\r\n// @Injectable({\r\n//     providedIn: 'root'\r\n// })\r\n// export class AuthService{\r\n//     //inyeccion, doc firebase\r\n//     private auth: Auth = inject(Auth);\r\n\r\n//     readonly authState$ = authState(this.auth)\r\n\r\n//     signInWithEmailAndPassword(credencial:Credential): Promise<UserCredential>{\r\n//         //necesita el auth (inyectado), email (string) y pass(string)\r\n//         return createUserWithEmailAndPassword(\r\n//             this.auth,\r\n//             credencial.email,\r\n//             credencial.password\r\n//         )\r\n//     }\r\n\r\n//     loginEmailCont(credencial:Credential){\r\n//         return signInWithEmailAndPassword(\r\n//             this.auth,\r\n//             credencial.email,\r\n//             credencial.password\r\n//         )\r\n//     }\r\n\r\n//     // providers\r\n\r\n//     signInWithGoogleProvider(): Promise<UserCredential> {\r\n//         const provider = new GoogleAuthProvider();\r\n\r\n//         return this.callPopUp(provider);\r\n//     }\r\n\r\n//     signInWithGithubProvider(): Promise<UserCredential> {\r\n//         const provider = new GithubAuthProvider();\r\n\r\n//         return this.callPopUp(provider);\r\n//   }\r\n\r\n//   async callPopUp(provider: AuthProvider): Promise<UserCredential> {\r\n//     try {\r\n//       const result = await signInWithPopup(this.auth, provider);\r\n\r\n//       return result;\r\n//     } catch (error: any) {\r\n//       return error;\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n// ---------------------------------\r\n\r\n\r\nimport { Injectable, inject } from '@angular/core';\r\nimport {\r\n  Auth,\r\n  AuthProvider,\r\n  GithubAuthProvider,\r\n  GoogleAuthProvider,\r\n  UserCredential,\r\n  authState,\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  signInWithPopup,\r\n} from '@angular/fire/auth';\r\n\r\nexport interface Credential {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private auth: Auth = inject(Auth);\r\n\r\n  readonly authState$ = authState(this.auth);\r\n\r\n  signUpWithEmailAndPassword(credential: Credential): Promise<UserCredential> {\r\n    return createUserWithEmailAndPassword(\r\n      this.auth,\r\n      credential.email,\r\n      credential.password\r\n    );\r\n  }\r\n\r\n  logInWithEmailAndPassword(credential: Credential) {\r\n    return signInWithEmailAndPassword(\r\n      this.auth,\r\n      credential.email,\r\n      credential.password\r\n    );\r\n  }\r\n\r\n  logOut(): Promise<void> {\r\n    return this.auth.signOut();\r\n  }\r\n\r\n  // providers\r\n\r\n  signInWithGoogleProvider(): Promise<UserCredential> {\r\n    const provider = new GoogleAuthProvider();\r\n\r\n    return this.callPopUp(provider);\r\n  }\r\n\r\n  signInWithGithubProvider(): Promise<UserCredential> {\r\n    const provider = new GithubAuthProvider();\r\n\r\n    return this.callPopUp(provider);\r\n  }\r\n\r\n  async callPopUp(provider: AuthProvider): Promise<UserCredential> {\r\n    try {\r\n      const result = await signInWithPopup(this.auth, provider);\r\n\r\n      return result;\r\n    } catch (error: any) {\r\n      return error;\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA,SAAqBA,MAAM,QAAQ,eAAe;AAClD,SACEC,IAAI,EAEJC,kBAAkB,EAClBC,kBAAkB,EAElBC,SAAS,EACTC,8BAA8B,EAC9BC,0BAA0B,EAC1BC,eAAe,QACV,oBAAoB;;AAU3B,OAAM,MAAOC,WAAW;EAHxBC,YAAA;IAIU,KAAAC,IAAI,GAASV,MAAM,CAACC,IAAI,CAAC;IAExB,KAAAU,UAAU,GAAGP,SAAS,CAAC,IAAI,CAACM,IAAI,CAAC;;EAE1CE,0BAA0BA,CAACC,UAAsB;IAC/C,OAAOR,8BAA8B,CACnC,IAAI,CAACK,IAAI,EACTG,UAAU,CAACC,KAAK,EAChBD,UAAU,CAACE,QAAQ,CACpB;EACH;EAEAC,yBAAyBA,CAACH,UAAsB;IAC9C,OAAOP,0BAA0B,CAC/B,IAAI,CAACI,IAAI,EACTG,UAAU,CAACC,KAAK,EAChBD,UAAU,CAACE,QAAQ,CACpB;EACH;EAEAE,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACP,IAAI,CAACQ,OAAO,EAAE;EAC5B;EAEA;EAEAC,wBAAwBA,CAAA;IACtB,MAAMC,QAAQ,GAAG,IAAIjB,kBAAkB,EAAE;IAEzC,OAAO,IAAI,CAACkB,SAAS,CAACD,QAAQ,CAAC;EACjC;EAEAE,wBAAwBA,CAAA;IACtB,MAAMF,QAAQ,GAAG,IAAIlB,kBAAkB,EAAE;IAEzC,OAAO,IAAI,CAACmB,SAAS,CAACD,QAAQ,CAAC;EACjC;EAEMC,SAASA,CAACD,QAAsB;IAAA,IAAAG,KAAA;IAAA,OAAAC,iBAAA;MACpC,IAAI;QACF,MAAMC,MAAM,SAASlB,eAAe,CAACgB,KAAI,CAACb,IAAI,EAAEU,QAAQ,CAAC;QAEzD,OAAOK,MAAM;MACf,CAAC,CAAC,OAAOC,KAAU,EAAE;QACnB,OAAOA,KAAK;MACd;IAAC;EACH;EAAC,QAAAC,CAAA,G;qBA/CUnB,WAAW;EAAA;EAAA,QAAAoB,EAAA,G;WAAXpB,WAAW;IAAAqB,OAAA,EAAXrB,WAAW,CAAAsB,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}