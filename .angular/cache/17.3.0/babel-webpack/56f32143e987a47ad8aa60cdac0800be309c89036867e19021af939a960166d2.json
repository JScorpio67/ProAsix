{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ASUS/Documents/GitHub/ProAsix/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { inject } from '@angular/core';\nimport { Auth, authState } from '@angular/fire/auth';\nimport { GithubAuthProvider, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signInWithPopup } from 'firebase/auth';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    //inyeccion, doc firebase\n    this.auth = inject(Auth);\n    this.authState$ = authState(this.auth);\n  }\n  signInWithEmailAndPassword(credencial) {\n    //necesita el auth (inyectado), email (string) y pass(string)\n    return createUserWithEmailAndPassword(this.auth, credencial.email, credencial.password);\n  }\n  loginEmailCont(credencial) {\n    return signInWithEmailAndPassword(this.auth, credencial.email, credencial.password);\n  }\n  // providers\n  signInWithGoogleProvider() {\n    const provider = new GoogleAuthProvider();\n    return this.callPopUp(provider);\n  }\n  signInWithGithubProvider() {\n    const provider = new GithubAuthProvider();\n    return this.callPopUp(provider);\n  }\n  callPopUp(provider) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const result = yield signInWithPopup(_this.auth, provider);\n        return result;\n      } catch (error) {\n        return error;\n      }\n    })();\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","Auth","authState","GithubAuthProvider","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signInWithPopup","AuthService","constructor","auth","authState$","credencial","email","password","loginEmailCont","signInWithGoogleProvider","provider","callPopUp","signInWithGithubProvider","_this","_asyncToGenerator","result","error","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ASUS\\Documents\\GitHub\\ProAsix\\src\\app\\services\\auth\\firebase\\auth.service.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core'\r\nimport { Auth, authState } from '@angular/fire/auth';\r\nimport { \r\n    AuthProvider,\r\n    GithubAuthProvider,\r\n    GoogleAuthProvider,\r\n    UserCredential,\r\n    createUserWithEmailAndPassword,\r\n    signInWithEmailAndPassword,\r\n    signInWithPopup,\r\n} from 'firebase/auth';\r\n//import { Auth } from 'firebase/auth';\r\n\r\nexport interface Credential {\r\n    email:string;\r\n    password:string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService{\r\n    //inyeccion, doc firebase\r\n    private auth: Auth = inject(Auth);\r\n\r\n    readonly authState$ = authState(this.auth)\r\n\r\n    signInWithEmailAndPassword(credencial:Credential): Promise<UserCredential>{\r\n        //necesita el auth (inyectado), email (string) y pass(string)\r\n        return createUserWithEmailAndPassword(\r\n            this.auth,\r\n            credencial.email,\r\n            credencial.password\r\n        )\r\n    }\r\n\r\n    loginEmailCont(credencial:Credential){\r\n        return signInWithEmailAndPassword(\r\n            this.auth,\r\n            credencial.email,\r\n            credencial.password\r\n        )\r\n    }\r\n\r\n    // providers\r\n\r\n    signInWithGoogleProvider(): Promise<UserCredential> {\r\n        const provider = new GoogleAuthProvider();\r\n\r\n        return this.callPopUp(provider);\r\n    }\r\n\r\n    signInWithGithubProvider(): Promise<UserCredential> {\r\n        const provider = new GithubAuthProvider();\r\n\r\n        return this.callPopUp(provider);\r\n  }\r\n\r\n  async callPopUp(provider: AuthProvider): Promise<UserCredential> {\r\n    try {\r\n      const result = await signInWithPopup(this.auth, provider);\r\n\r\n      return result;\r\n    } catch (error: any) {\r\n      return error;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// ---------------------------------\r\n\r\n\r\n// import { Injectable } from '@angular/core';\r\n// import {\r\n//   Auth,\r\n//   AuthProvider,\r\n//   GithubAuthProvider,\r\n//   GoogleAuthProvider,\r\n//   UserCredential,\r\n//   authState,\r\n//   createUserWithEmailAndPassword,\r\n//   signInWithEmailAndPassword,\r\n//   signInWithPopup,\r\n//   AngularFireAuth \r\n// } from '@angular/fire/auth';\r\n\r\n// export interface Credential {\r\n//   email: string;\r\n//   password: string;\r\n// }\r\n\r\n// @Injectable({\r\n//   providedIn: 'root',\r\n// })\r\n// export class AuthService {\r\n//   // private auth: Auth = inject(Auth);\r\n//   constructor(private afAuth: AngularFireAuth) {}\r\n//   // readonly authState$ = authState(this.auth);\r\n\r\n//   signUpWithEmailAndPassword(credential: Credential): Promise<UserCredential> {\r\n//     return this.afAuth.createUserWithEmailAndPassword(\r\n//       credential.email,\r\n//       credential.password\r\n//     );\r\n//   }\r\n\r\n//   logInWithEmailAndPassword(credential: Credential) {\r\n//     return this.afAuth.logInWithEmailAndPassword(\r\n//       credential.email,\r\n//       credential.password\r\n//     );\r\n//   }\r\n\r\n//   logOut(): Promise<void> {\r\n//     return this.afAuth.signOut();\r\n//   }\r\n\r\n//   // providers\r\n\r\n//   signInWithGoogleProvider(): Promise<UserCredential> {\r\n//     const provider = new GoogleAuthProvider();\r\n\r\n//     return this.callPopUp(provider);\r\n//   }\r\n\r\n//   signInWithGithubProvider(): Promise<UserCredential> {\r\n//     const provider = new GithubAuthProvider();\r\n\r\n//     return this.callPopUp(provider);\r\n//   }\r\n\r\n//   async callPopUp(provider: AuthProvider): Promise<UserCredential> {\r\n//     try {\r\n//       const result = await signInWithPopup(this.auth, provider);\r\n\r\n//       return result;\r\n//     } catch (error: any) {\r\n//       return error;\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n// ---------------------------------\r\n\r\n// auth.service.ts\r\n// import { Injectable } from '@angular/core';\r\n// import { AngularFireAuth } from '@angular/fire/auth';\r\n// import { auth } from  '@angular/fire/auth';\r\n\r\n// export interface Credential {\r\n//   email: string;\r\n//   password: string;\r\n// }\r\n\r\n// @Injectable({\r\n//   providedIn: 'root',\r\n// })\r\n// export class AuthService {\r\n//   constructor(private afAuth: AngularFireAuth) {}\r\n\r\n//   signUpWithEmailAndPassword(credential: Credential) {\r\n//     return this.afAuth.createUserWithEmailAndPassword(\r\n//       credential.email,\r\n//       credential.password\r\n//     );\r\n//   }\r\n\r\n//   signInWithEmailAndPassword(credential: Credential) {\r\n//     return this.afAuth.signInWithEmailAndPassword(\r\n//       credential.email,\r\n//       credential.password\r\n//     );\r\n//   }\r\n\r\n//   signOut() {\r\n//     return this.afAuth.signOut();\r\n//   }\r\n// }\r\n"],"mappings":";AAAA,SAAqBA,MAAM,QAAQ,eAAe;AAClD,SAASC,IAAI,EAAEC,SAAS,QAAQ,oBAAoB;AACpD,SAEIC,kBAAkB,EAClBC,kBAAkB,EAElBC,8BAA8B,EAC9BC,0BAA0B,EAC1BC,eAAe,QACZ,eAAe;;AAWtB,OAAM,MAAOC,WAAW;EAHxBC,YAAA;IAII;IACQ,KAAAC,IAAI,GAASV,MAAM,CAACC,IAAI,CAAC;IAExB,KAAAU,UAAU,GAAGT,SAAS,CAAC,IAAI,CAACQ,IAAI,CAAC;;EAE1CJ,0BAA0BA,CAACM,UAAqB;IAC5C;IACA,OAAOP,8BAA8B,CACjC,IAAI,CAACK,IAAI,EACTE,UAAU,CAACC,KAAK,EAChBD,UAAU,CAACE,QAAQ,CACtB;EACL;EAEAC,cAAcA,CAACH,UAAqB;IAChC,OAAON,0BAA0B,CAC7B,IAAI,CAACI,IAAI,EACTE,UAAU,CAACC,KAAK,EAChBD,UAAU,CAACE,QAAQ,CACtB;EACL;EAEA;EAEAE,wBAAwBA,CAAA;IACpB,MAAMC,QAAQ,GAAG,IAAIb,kBAAkB,EAAE;IAEzC,OAAO,IAAI,CAACc,SAAS,CAACD,QAAQ,CAAC;EACnC;EAEAE,wBAAwBA,CAAA;IACpB,MAAMF,QAAQ,GAAG,IAAId,kBAAkB,EAAE;IAEzC,OAAO,IAAI,CAACe,SAAS,CAACD,QAAQ,CAAC;EACrC;EAEMC,SAASA,CAACD,QAAsB;IAAA,IAAAG,KAAA;IAAA,OAAAC,iBAAA;MACpC,IAAI;QACF,MAAMC,MAAM,SAASf,eAAe,CAACa,KAAI,CAACV,IAAI,EAAEO,QAAQ,CAAC;QAEzD,OAAOK,MAAM;MACf,CAAC,CAAC,OAAOC,KAAU,EAAE;QACnB,OAAOA,KAAK;MACd;IAAC;EACH;EAAC,QAAAC,CAAA,G;qBA7CUhB,WAAW;EAAA;EAAA,QAAAiB,EAAA,G;WAAXjB,WAAW;IAAAkB,OAAA,EAAXlB,WAAW,CAAAmB,IAAA;IAAAC,UAAA,EAFR;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}