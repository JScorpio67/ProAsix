{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Auth, authState } from '@angular/fire/auth';\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    //inyeccion, doc firebase\n    this.auth = inject(Auth);\n    this.authState$ = authState(this.auth);\n  }\n  signInWithEmailAndPassword(credencial) {\n    //necesita el auth (inyectado), email (string) y pass(string)\n    return createUserWithEmailAndPassword(this.auth, credencial.email, credencial.password);\n  }\n  loginEmailCont(credencial) {\n    return signInWithEmailAndPassword(this.auth, credencial.email, credencial.password);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","Auth","authState","createUserWithEmailAndPassword","signInWithEmailAndPassword","AuthService","constructor","auth","authState$","credencial","email","password","loginEmailCont","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ASUS\\Documents\\GitHub\\ProAsix\\src\\app\\services\\auth\\firebase\\auth.service.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core'\r\nimport { Auth, authState } from '@angular/fire/auth';\r\nimport { \r\n    UserCredential,\r\n    createUserWithEmailAndPassword, \r\n    signInWithEmailAndPassword \r\n} from 'firebase/auth';\r\n//import { Auth } from 'firebase/auth';\r\n\r\nexport interface Credential {\r\n    email:string;\r\n    password:string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService{\r\n    //inyeccion, doc firebase\r\n    private auth: Auth = inject(Auth);\r\n\r\n    readonly authState$ = authState(this.auth)\r\n\r\n    signInWithEmailAndPassword(credencial:Credential): Promise<UserCredential>{\r\n        //necesita el auth (inyectado), email (string) y pass(string)\r\n        return createUserWithEmailAndPassword(\r\n            this.auth,\r\n            credencial.email,\r\n            credencial.password\r\n        )\r\n    }\r\n\r\n    loginEmailCont(credencial:Credential){\r\n        return signInWithEmailAndPassword(\r\n            this.auth,\r\n            credencial.email,\r\n            credencial.password\r\n        )\r\n    }\r\n}"],"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;AAClD,SAASC,IAAI,EAAEC,SAAS,QAAQ,oBAAoB;AACpD,SAEIC,8BAA8B,EAC9BC,0BAA0B,QACvB,eAAe;;AAWtB,OAAM,MAAOC,WAAW;EAHxBC,YAAA;IAII;IACQ,KAAAC,IAAI,GAASP,MAAM,CAACC,IAAI,CAAC;IAExB,KAAAO,UAAU,GAAGN,SAAS,CAAC,IAAI,CAACK,IAAI,CAAC;;EAE1CH,0BAA0BA,CAACK,UAAqB;IAC5C;IACA,OAAON,8BAA8B,CACjC,IAAI,CAACI,IAAI,EACTE,UAAU,CAACC,KAAK,EAChBD,UAAU,CAACE,QAAQ,CACtB;EACL;EAEAC,cAAcA,CAACH,UAAqB;IAChC,OAAOL,0BAA0B,CAC7B,IAAI,CAACG,IAAI,EACTE,UAAU,CAACC,KAAK,EAChBD,UAAU,CAACE,QAAQ,CACtB;EACL;EAAC,QAAAE,CAAA,G;qBArBQR,WAAW;EAAA;EAAA,QAAAS,EAAA,G;WAAXT,WAAW;IAAAU,OAAA,EAAXV,WAAW,CAAAW,IAAA;IAAAC,UAAA,EAFR;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}