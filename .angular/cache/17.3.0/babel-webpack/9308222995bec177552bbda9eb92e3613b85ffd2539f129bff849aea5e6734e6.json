{"ast":null,"code":"\"use strict\";\n\n// import { Injectable } from '@angular/core';\n// import { AngularFirestore } from '@angular/fire/compat/firestore';\n// import { AngularFireAuth } from '@angular/fire/compat/auth';\n// import { switchMap, map } from 'rxjs/operators';\n// import { of } from 'rxjs';\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class UserService {\n//   constructor(\n//     private afs: AngularFirestore,\n//     private afAuth: AngularFireAuth\n//   ) {}\n//   private getCurrentUser() {\n//     return this.afAuth.authState.pipe(\n//       map(user => {\n//         console.log('Current user:', user);\n//         return user?.uid;\n//       })\n//     );\n//   }\n//   addFavoriteArtist(artist: any) {\n//     return this.getCurrentUser().pipe(\n//       switchMap(uid => {\n//         console.log('User ID:', uid);\n//         if (uid) {\n//           const userRef = this.afs.collection('users').doc(uid);\n//           console.log('Adding favorite artist:', artist);\n//           return userRef.collection('favorites').doc('artists').set({\n//             [artist.id]: artist\n//           }, { merge: true });\n//         } else {\n//           console.error('No user ID found');\n//           return of(null);\n//         }\n//       })\n//     ).toPromise().then(() => {\n//       console.log('Artist added successfully');\n//     }).catch(error => {\n//       console.error('Error adding artist:', error);\n//     });\n//   }\n//   addFavoriteAlbum(album: any) {\n//     return this.getCurrentUser().pipe(\n//       switchMap(uid => {\n//         console.log('User ID:', uid);\n//         if (uid) {\n//           const userRef = this.afs.collection('users').doc(uid);\n//           console.log('Adding favorite album:', album);\n//           return userRef.collection('favorites').doc('albums').set({\n//             [album.id]: album\n//           }, { merge: true });\n//         } else {\n//           console.error('No user ID found');\n//           return of(null);\n//         }\n//       })\n//     ).toPromise().then(() => {\n//       console.log('Album added successfully');\n//     }).catch(error => {\n//       console.error('Error adding album:', error);\n//     });\n//   }\n//   addFavoriteTrack(track: any) {\n//     return this.getCurrentUser().pipe(\n//       switchMap(uid => {\n//         console.log('User ID:', uid);\n//         if (uid) {\n//           const userRef = this.afs.collection('users').doc(uid);\n//           console.log('Adding favorite track:', track);\n//           return userRef.collection('favorites').doc('tracks').set({\n//             [track.id]: track\n//           }, { merge: true });\n//         } else {\n//           console.error('No user ID found');\n//           return of(null);\n//         }\n//       })\n//     ).toPromise().then(() => {\n//       console.log('Track added successfully');\n//     }).catch(error => {\n//       console.error('Error adding track:', error);\n//     });\n//   }\n//   getFavorites() {\n//     return this.getCurrentUser().pipe(\n//       switchMap(uid => {\n//         console.log('User ID:', uid);\n//         if (uid) {\n//           const userRef = this.afs.collection('users').doc(uid);\n//           console.log('Fetching favorite items');\n//           return userRef.collection('favorites').valueChanges();\n//         } else {\n//           console.error('No user ID found');\n//           return of(null);\n//         }\n//       })\n//     );\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\ASUS\\Documents\\GitHub\\ProAsix\\src\\app\\services\\user.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\r\n// import { AngularFirestore } from '@angular/fire/compat/firestore';\r\n// import { AngularFireAuth } from '@angular/fire/compat/auth';\r\n// import { switchMap, map } from 'rxjs/operators';\r\n// import { of } from 'rxjs';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class UserService {\r\n//   constructor(\r\n//     private afs: AngularFirestore,\r\n//     private afAuth: AngularFireAuth\r\n//   ) {}\r\n\r\n//   private getCurrentUser() {\r\n//     return this.afAuth.authState.pipe(\r\n//       map(user => {\r\n//         console.log('Current user:', user);\r\n//         return user?.uid;\r\n//       })\r\n//     );\r\n//   }\r\n\r\n//   addFavoriteArtist(artist: any) {\r\n//     return this.getCurrentUser().pipe(\r\n//       switchMap(uid => {\r\n//         console.log('User ID:', uid);\r\n//         if (uid) {\r\n//           const userRef = this.afs.collection('users').doc(uid);\r\n//           console.log('Adding favorite artist:', artist);\r\n//           return userRef.collection('favorites').doc('artists').set({\r\n//             [artist.id]: artist\r\n//           }, { merge: true });\r\n//         } else {\r\n//           console.error('No user ID found');\r\n//           return of(null);\r\n//         }\r\n//       })\r\n//     ).toPromise().then(() => {\r\n//       console.log('Artist added successfully');\r\n//     }).catch(error => {\r\n//       console.error('Error adding artist:', error);\r\n//     });\r\n//   }\r\n\r\n//   addFavoriteAlbum(album: any) {\r\n//     return this.getCurrentUser().pipe(\r\n//       switchMap(uid => {\r\n//         console.log('User ID:', uid);\r\n//         if (uid) {\r\n//           const userRef = this.afs.collection('users').doc(uid);\r\n//           console.log('Adding favorite album:', album);\r\n//           return userRef.collection('favorites').doc('albums').set({\r\n//             [album.id]: album\r\n//           }, { merge: true });\r\n//         } else {\r\n//           console.error('No user ID found');\r\n//           return of(null);\r\n//         }\r\n//       })\r\n//     ).toPromise().then(() => {\r\n//       console.log('Album added successfully');\r\n//     }).catch(error => {\r\n//       console.error('Error adding album:', error);\r\n//     });\r\n//   }\r\n\r\n//   addFavoriteTrack(track: any) {\r\n//     return this.getCurrentUser().pipe(\r\n//       switchMap(uid => {\r\n//         console.log('User ID:', uid);\r\n//         if (uid) {\r\n//           const userRef = this.afs.collection('users').doc(uid);\r\n//           console.log('Adding favorite track:', track);\r\n//           return userRef.collection('favorites').doc('tracks').set({\r\n//             [track.id]: track\r\n//           }, { merge: true });\r\n//         } else {\r\n//           console.error('No user ID found');\r\n//           return of(null);\r\n//         }\r\n//       })\r\n//     ).toPromise().then(() => {\r\n//       console.log('Track added successfully');\r\n//     }).catch(error => {\r\n//       console.error('Error adding track:', error);\r\n//     });\r\n//   }\r\n\r\n//   getFavorites() {\r\n//     return this.getCurrentUser().pipe(\r\n//       switchMap(uid => {\r\n//         console.log('User ID:', uid);\r\n//         if (uid) {\r\n//           const userRef = this.afs.collection('users').doc(uid);\r\n//           console.log('Fetching favorite items');\r\n//           return userRef.collection('favorites').valueChanges();\r\n//         } else {\r\n//           console.error('No user ID found');\r\n//           return of(null);\r\n//         }\r\n//       })\r\n//     );\r\n//   }\r\n// }\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}