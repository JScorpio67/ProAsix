{"ast":null,"code":"import { catchError, throwError, BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoginService {\n  constructor(http) {\n    this.http = http;\n    //DEFINICION DE LOS BEHAVIOUR SUBJECTS\n    this.currentUserLoginOn = new BehaviorSubject(false);\n    this.currentUserData = new BehaviorSubject({\n      id: 0,\n      email: ''\n    });\n  }\n  //CREAMOS EL METODO LOGIN\n  //login(formulario_input:any){ //any es muy generico\n  login(formulario_input) {\n    return this.http.get('././assets/data.json').pipe(\n    //TAP PARA EMITIR LA INFORMACION A LOS COMPONENTES SUSCRITOS\n    tap(userData => {\n      this.currentUserData.next(userData);\n      this.currentUserLoginOn.next(true);\n    }), catchError(this.handlerError));\n  }\n  //MANEJADOR DE ERRORES\n  handlerError(error) {\n    if (error.status === 0) {\n      console.error('Se ha producido un error', error.error);\n    } else {\n      console.error('Backend retorno el codigo de estado', error.status, error.error);\n      //retornamos la excepcion.\n    }\n    return throwError(() => new Error('Algo falló, intente nuevamente'));\n  }\n  //SUSCRIBCION DE LOS COMPONENTES\n  get userData() {\n    return this.currentUserData.asObservable();\n  }\n  static #_ = this.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","throwError","BehaviorSubject","tap","LoginService","constructor","http","currentUserLoginOn","currentUserData","id","email","login","formulario_input","get","pipe","userData","next","handlerError","error","status","console","Error","asObservable","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/jota/Documentos/GitHub/ProAsix/src/app/services/auth/login/login.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { LoginRequest } from './loginRequest';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, catchError, throwError, BehaviorSubject, tap } from 'rxjs'; \nimport { User } from '../user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n  //DEFINICION DE LOS BEHAVIOUR SUBJECTS\n  currentUserLoginOn: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  currentUserData: BehaviorSubject<User> = new BehaviorSubject<User>({id:0, email:''});\n\n  constructor(private http: HttpClient) { }\n  //CREAMOS EL METODO LOGIN\n  //login(formulario_input:any){ //any es muy generico\n  login(formulario_input:LoginRequest): Observable<User> {\n    return this.http.get<User>('././assets/data.json').pipe(\n      //TAP PARA EMITIR LA INFORMACION A LOS COMPONENTES SUSCRITOS\n      tap( (userData : User) =>{\n        this.currentUserData.next(userData);\n        this.currentUserLoginOn.next(true);\n      }),\n      catchError(this.handlerError)\n    );\n  }\n\n  //MANEJADOR DE ERRORES\n  private handlerError(error:HttpErrorResponse){\n    if (error.status===0){\n      console.error('Se ha producido un error', error.error)\n    } else {\n      console.error('Backend retorno el codigo de estado', error.status, error.error);\n      //retornamos la excepcion.\n    } return throwError (()=> new Error('Algo falló, intente nuevamente'));\n  }\n  //SUSCRIBCION DE LOS COMPONENTES\n  get userData():Observable<User>{\n    return this.currentUserData.asObservable();\n}\n\n\n}\n\n"],"mappings":"AAGA,SAAqBA,UAAU,EAAEC,UAAU,EAAEC,eAAe,EAAEC,GAAG,QAAQ,MAAM;;;AAM/E,OAAM,MAAOC,YAAY;EAKvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJxB;IACA,KAAAC,kBAAkB,GAA6B,IAAIL,eAAe,CAAU,KAAK,CAAC;IAClF,KAAAM,eAAe,GAA0B,IAAIN,eAAe,CAAO;MAACO,EAAE,EAAC,CAAC;MAAEC,KAAK,EAAC;IAAE,CAAC,CAAC;EAE5C;EACxC;EACA;EACAC,KAAKA,CAACC,gBAA6B;IACjC,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAO,sBAAsB,CAAC,CAACC,IAAI;IACrD;IACAX,GAAG,CAAGY,QAAe,IAAI;MACvB,IAAI,CAACP,eAAe,CAACQ,IAAI,CAACD,QAAQ,CAAC;MACnC,IAAI,CAACR,kBAAkB,CAACS,IAAI,CAAC,IAAI,CAAC;IACpC,CAAC,CAAC,EACFhB,UAAU,CAAC,IAAI,CAACiB,YAAY,CAAC,CAC9B;EACH;EAEA;EACQA,YAAYA,CAACC,KAAuB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAG,CAAC,EAAC;MACnBC,OAAO,CAACF,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACA,KAAK,CAAC;IACxD,CAAC,MAAM;MACLE,OAAO,CAACF,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAACC,MAAM,EAAED,KAAK,CAACA,KAAK,CAAC;MAC/E;IACF;IAAE,OAAOjB,UAAU,CAAE,MAAK,IAAIoB,KAAK,CAAC,gCAAgC,CAAC,CAAC;EACxE;EACA;EACA,IAAIN,QAAQA,CAAA;IACV,OAAO,IAAI,CAACP,eAAe,CAACc,YAAY,EAAE;EAC9C;EAAC,QAAAC,CAAA,G;qBA/BYnB,YAAY,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZxB,YAAY;IAAAyB,OAAA,EAAZzB,YAAY,CAAA0B,IAAA;IAAAC,UAAA,EAFX;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}