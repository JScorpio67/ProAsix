{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { map, switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs'; //para observable\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/fire/compat/auth\";\nimport * as i3 from \"@angular/fire/compat/firestore\";\nconst URL = environment.spotiUrl;\nexport class SpotifyService {\n  ///////////////////////////// API\n  constructor(http, afAuth, firestore) {\n    this.http = http;\n    this.afAuth = afAuth;\n    this.firestore = firestore;\n  }\n  //METODO QUE REUTILIZAREMOS PARA ABREVIAR OTROS METODOS, URL SPOTIFY   \n  getQuery(query) {\n    const headers = new HttpHeaders({\n      'Authorization': 'Bearer BQBlrzSJZU7uTmuX4OdmDfKejvFs8rkKncE7snlwxkAFOg8FysrMQ6-L_9ofRi4U7H3MWGmUojCx5XmFO3a1QGZIDzhrOy0Vh0yEJnTEPHk36lSnf2g\"'\n    });\n    return this.http.get(`${URL}/${query}`, {\n      headers\n    });\n  }\n  //METODO NUEVOS ALBUMES\n  getNewReleases() {\n    return this.getQuery('browse/new-releases?limit=24').pipe(map(res => {\n      return res.albums.items;\n    }));\n  }\n  //METODO ARTISTAS, PORTADAS, ETC\n  getArtistas(termino) {\n    return this.getQuery(`search?query=${termino}&type=artist&market=es&limit=15`).pipe(map(res => {\n      return res.artists.items;\n    }));\n  }\n  //METODO PERFIL ARTISTA\n  getInfoArtista(id) {\n    return this.getQuery(`artists/${id}`);\n  }\n  //METODO TRACKS\n  getTopTracks(id) {\n    return this.getQuery(`artists/${id}/top-tracks?market=es`).pipe(map(res => {\n      return res.tracks;\n    }));\n  }\n  // FIREBASE PERFIL\n  getUsuario() {\n    return this.afAuth.authState.pipe(map(user => user?.uid));\n  }\n  //METODO ARTISTA FAV\n  artistaFav(artista) {\n    return this.getUsuario().subscribe(uid => {\n      if (uid) {\n        const usrRef = this.firestore.collection('users').doc(uid);\n        usrRef.collection('favorites').doc('artists').set({\n          [artista.id]: artista\n        }, {\n          merge: true\n        });\n      }\n    });\n  }\n  //METODO ALBUM FAV\n  albumFav(album) {\n    return this.getUsuario().subscribe(uid => {\n      if (uid) {\n        const usrRef = this.firestore.collection('users').doc(uid);\n        usrRef.collection('favorites').doc('albums').set({\n          [album.id]: album\n        }, {\n          merge: true\n        });\n      }\n    });\n  }\n  //METODO CANCION FAV\n  cancionFav(cancion) {\n    return this.getUsuario().subscribe(uid => {\n      if (uid) {\n        const usrRef = this.firestore.collection('users').doc(uid);\n        usrRef.collection('favorites').doc('songs').set({\n          [cancion.id]: cancion\n        }, {\n          merge: true\n        });\n      }\n    });\n  }\n  //VOLCAR FAVORITOS\n  getFavorites() {\n    return this.getUsuario().pipe(switchMap(uid => {\n      if (uid) {\n        const usrRef = this.firestore.collection('users').doc(uid);\n        return usrRef.collection('favorites').valueChanges();\n      } else {\n        return of(null);\n      }\n    }));\n  }\n  static #_ = this.ɵfac = function SpotifyService_Factory(t) {\n    return new (t || SpotifyService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AngularFireAuth), i0.ɵɵinject(i3.AngularFirestore));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpotifyService,\n    factory: SpotifyService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","map","switchMap","of","URL","spotiUrl","SpotifyService","constructor","http","afAuth","firestore","getQuery","query","headers","get","getNewReleases","pipe","res","albums","items","getArtistas","termino","artists","getInfoArtista","id","getTopTracks","tracks","getUsuario","authState","user","uid","artistaFav","artista","subscribe","usrRef","collection","doc","set","merge","albumFav","album","cancionFav","cancion","getFavorites","valueChanges","_","i0","ɵɵinject","i1","HttpClient","i2","AngularFireAuth","i3","AngularFirestore","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ASUS\\Documents\\GitHub\\ProAsix\\src\\app\\services\\spotify.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { map, switchMap } from 'rxjs/operators'\r\n\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth'\r\nimport { AngularFirestore, AngularFirestoreDocument } from '@angular/fire/compat/firestore'\r\nimport { of } from 'rxjs'; //para observable\r\n\r\nconst URL = environment.spotiUrl\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SpotifyService {\r\n  ///////////////////////////// API\r\n  constructor(\r\n    private http:HttpClient,\r\n    private afAuth: AngularFireAuth,\r\n    private firestore: AngularFirestore,\r\n  ) { }\r\n  //METODO QUE REUTILIZAREMOS PARA ABREVIAR OTROS METODOS, URL SPOTIFY   \r\n  getQuery(query:string ){\r\n    const headers = new HttpHeaders({\r\n      'Authorization' : 'Bearer BQBlrzSJZU7uTmuX4OdmDfKejvFs8rkKncE7snlwxkAFOg8FysrMQ6-L_9ofRi4U7H3MWGmUojCx5XmFO3a1QGZIDzhrOy0Vh0yEJnTEPHk36lSnf2g\"'   \r\n    });\r\n    return this.http.get(`${URL}/${query}`, {headers})\r\n  }\r\n\r\n  //METODO NUEVOS ALBUMES\r\n  getNewReleases (){\r\n    return this.getQuery('browse/new-releases?limit=24').pipe(\r\n      map((res:any)=>{\r\n        return res.albums.items;\r\n      })\r\n    );\r\n  }\r\n\r\n  //METODO ARTISTAS, PORTADAS, ETC\r\n  getArtistas(termino:string){\r\n    return this.getQuery(`search?query=${termino}&type=artist&market=es&limit=15`).pipe(\r\n      map((res:any)=>{\r\n        return res.artists.items;\r\n      })\r\n    );\r\n  }\r\n    \r\n  //METODO PERFIL ARTISTA\r\n  getInfoArtista(id:string){\r\n    return this.getQuery(`artists/${id}`)\r\n  }\r\n\r\n  //METODO TRACKS\r\n  getTopTracks(id:string) {\r\n    return this.getQuery(`artists/${id}/top-tracks?market=es`).pipe(\r\n      map((res:any)=>{\r\n        return res.tracks;\r\n      })\r\n    );\r\n  }\r\n\r\n  // FIREBASE PERFIL\r\n  private getUsuario(){\r\n    return this.afAuth.authState.pipe(map(user => user?.uid))\r\n  }\r\n\r\n  //METODO ARTISTA FAV\r\n  artistaFav(artista:any){\r\n    return this.getUsuario().subscribe( uid =>{\r\n      if (uid) {\r\n        const usrRef = this.firestore.collection('users').doc(uid);\r\n        usrRef.collection('favorites').doc('artists').set({\r\n          [artista.id]:artista\r\n        }, {merge: true});\r\n      }\r\n    });\r\n  }\r\n\r\n  //METODO ALBUM FAV\r\n  albumFav(album:any){\r\n    return this.getUsuario().subscribe( uid =>{\r\n      if (uid) {\r\n        const usrRef = this.firestore.collection('users').doc(uid);\r\n        usrRef.collection('favorites').doc('albums').set({\r\n          [album.id]:album\r\n        }, {merge: true});\r\n      }\r\n    });\r\n  }\r\n\r\n  //METODO CANCION FAV\r\n  cancionFav(cancion:any){\r\n    return this.getUsuario().subscribe( uid =>{\r\n      if (uid) {\r\n        const usrRef = this.firestore.collection('users').doc(uid);\r\n        usrRef.collection('favorites').doc('songs').set({\r\n          [cancion.id]:cancion\r\n        }, {merge: true});\r\n      }\r\n    });\r\n  }\r\n\r\n  //VOLCAR FAVORITOS\r\n  getFavorites() {\r\n    return this.getUsuario().pipe(\r\n      switchMap(uid => {\r\n        if (uid) {\r\n          const usrRef = this.firestore.collection('users').doc(uid);\r\n          return usrRef.collection('favorites').valueChanges();\r\n        } else {\r\n          return of(null);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n\r\n} \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}