{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nconst URL = environment.spotiUrl;\nexport class SpotifyService {\n  ///////////////////////////// API\n  constructor(http,\n  // private afAuth: AngularFireAuth,\n  firestore) {\n    this.http = http;\n    this.firestore = firestore;\n  }\n  //METODO QUE REUTILIZAREMOS PARA ABREVIAR OTROS METODOS, URL SPOTIFY   \n  getQuery(query) {\n    const headers = new HttpHeaders({\n      'Authorization': 'Bearer BQChM0zs6oiq4BC3NeYz21Q_slzxEtDLn8S6Odn1sDJScOe5DBZ6eJSt3fSgLaqTj6epDgouUx7X9aD2QoucC4t_YkJGedguCZOZJASFx5RDYa_bOKw'\n    });\n    return this.http.get(`${URL}/${query}`, {\n      headers\n    });\n  }\n  //METODO NUEVOS ALBUMES\n  getNewReleases() {\n    return this.getQuery('browse/new-releases?limit=24').pipe(map(res => {\n      return res.albums.items;\n    }));\n  }\n  //METODO ARTISTAS, PORTADAS, ETC\n  getArtistas(termino) {\n    return this.getQuery(`search?query=${termino}&type=artist&market=es&limit=15`).pipe(map(res => {\n      return res.artists.items;\n    }));\n  }\n  //METODO PERFIL ARTISTA\n  getInfoArtista(id) {\n    return this.getQuery(`artists/${id}`);\n  }\n  //METODO TRACKS\n  getTopTracks(id) {\n    return this.getQuery(`artists/${id}/top-tracks?market=es`).pipe(map(res => {\n      return res.tracks;\n    }));\n  }\n  static #_ = this.ɵfac = function SpotifyService_Factory(t) {\n    return new (t || SpotifyService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AngularFirestore));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpotifyService,\n    factory: SpotifyService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","map","URL","spotiUrl","SpotifyService","constructor","http","firestore","getQuery","query","headers","get","getNewReleases","pipe","res","albums","items","getArtistas","termino","artists","getInfoArtista","id","getTopTracks","tracks","_","i0","ɵɵinject","i1","HttpClient","i2","AngularFirestore","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ASUS\\Documents\\GitHub\\ProAsix\\src\\app\\services\\spotify.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { map, switchMap } from 'rxjs/operators'\r\n\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth'\r\nimport { AngularFirestore, AngularFirestoreDocument } from '@angular/fire/compat/firestore'\r\nimport { of } from 'rxjs'; //para observable\r\n\r\nconst URL = environment.spotiUrl\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SpotifyService {\r\n  ///////////////////////////// API\r\n  constructor(\r\n    private http:HttpClient,\r\n\r\n    // private afAuth: AngularFireAuth,\r\n    private firestore: AngularFirestore,\r\n  ) { }\r\n  //METODO QUE REUTILIZAREMOS PARA ABREVIAR OTROS METODOS, URL SPOTIFY   \r\n  getQuery(query:string ){\r\n    const headers = new HttpHeaders({\r\n      'Authorization' : 'Bearer BQChM0zs6oiq4BC3NeYz21Q_slzxEtDLn8S6Odn1sDJScOe5DBZ6eJSt3fSgLaqTj6epDgouUx7X9aD2QoucC4t_YkJGedguCZOZJASFx5RDYa_bOKw'   \r\n    });\r\n    return this.http.get(`${URL}/${query}`, {headers})\r\n  }\r\n\r\n  //METODO NUEVOS ALBUMES\r\n  getNewReleases (){\r\n    return this.getQuery('browse/new-releases?limit=24').pipe(\r\n      map((res:any)=>{\r\n        return res.albums.items;\r\n      })\r\n    );\r\n  }\r\n\r\n  //METODO ARTISTAS, PORTADAS, ETC\r\n  getArtistas(termino:string){\r\n    return this.getQuery(`search?query=${termino}&type=artist&market=es&limit=15`).pipe(\r\n      map((res:any)=>{\r\n        return res.artists.items;\r\n      })\r\n    );\r\n  }\r\n    \r\n  //METODO PERFIL ARTISTA\r\n  getInfoArtista(id:string){\r\n    return this.getQuery(`artists/${id}`)\r\n  }\r\n\r\n  //METODO TRACKS\r\n  getTopTracks(id:string) {\r\n    return this.getQuery(`artists/${id}/top-tracks?market=es`).pipe(\r\n      map((res:any)=>{\r\n        return res.tracks;\r\n      })\r\n    );\r\n  }\r\n\r\n  // FIREBASE PERFIL\r\n  // private getUsuario(){\r\n  //   return this.afAuth.authState.pipe(map(user => user?.uid))\r\n  // }\r\n\r\n  // //METODO ARTISTA FAV\r\n  // artistaFav(artista:any){\r\n  //   return this.getUsuario().pipe(\r\n  //     switchMap(uid => {\r\n  //       if (uid) {\r\n  //         const userRef = this.afs.collection('users').doc(uid);\r\n  //         return userRef.collection('favorites').doc('artists').set({\r\n  //           [artista.id]: artista\r\n  //         }, { merge: true });\r\n  //       } else {\r\n  //         return of(null);\r\n  //       }\r\n  //     })\r\n  //   ).toPromise();\r\n  // }\r\n\r\n  // //METODO ALBUM FAV\r\n  // albumFav(album:any){\r\n  //   return this.getUsuario().subscribe( uid =>{\r\n  //     if (uid) {\r\n  //       const usrRef = this.afs.collection('users').doc(uid);\r\n  //       usrRef.collection('favorites').doc('albums').set({\r\n  //         [album.id]:album\r\n  //       }, {merge: true});\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // //METODO CANCION FAV\r\n  // cancionFav(cancion:any){\r\n  //   return this.getUsuario().subscribe( uid =>{\r\n  //     if (uid) {\r\n  //       const usrRef = this.afs.collection('users').doc(uid);\r\n  //       usrRef.collection('favorites').doc('songs').set({\r\n  //         [cancion.id]:cancion\r\n  //       }, {merge: true});\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // //VOLCAR FAVORITOS\r\n  // getFavorites() {\r\n  //   return this.getUsuario().pipe(\r\n  //     switchMap(uid => {\r\n  //       if (uid) {\r\n  //         const usrRef = this.afs.collection('users').doc(uid);\r\n  //         return usrRef.collection('favorites').valueChanges();\r\n  //       } else {\r\n  //         return of(null);\r\n  //       }\r\n  //     })\r\n  //   );\r\n  // }\r\n\r\n\r\n\r\n} \r\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,GAAG,QAAmB,gBAAgB;;;;AAM/C,MAAMC,GAAG,GAAGF,WAAW,CAACG,QAAQ;AAKhC,OAAM,MAAOC,cAAc;EACzB;EACAC,YACUC,IAAe;EAEvB;EACQC,SAA2B;IAH3B,KAAAD,IAAI,GAAJA,IAAI;IAGJ,KAAAC,SAAS,GAATA,SAAS;EACf;EACJ;EACAC,QAAQA,CAACC,KAAY;IACnB,MAAMC,OAAO,GAAG,IAAIX,WAAW,CAAC;MAC9B,eAAe,EAAG;KACnB,CAAC;IACF,OAAO,IAAI,CAACO,IAAI,CAACK,GAAG,CAAC,GAAGT,GAAG,IAAIO,KAAK,EAAE,EAAE;MAACC;IAAO,CAAC,CAAC;EACpD;EAEA;EACAE,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACJ,QAAQ,CAAC,8BAA8B,CAAC,CAACK,IAAI,CACvDZ,GAAG,CAAEa,GAAO,IAAG;MACb,OAAOA,GAAG,CAACC,MAAM,CAACC,KAAK;IACzB,CAAC,CAAC,CACH;EACH;EAEA;EACAC,WAAWA,CAACC,OAAc;IACxB,OAAO,IAAI,CAACV,QAAQ,CAAC,gBAAgBU,OAAO,iCAAiC,CAAC,CAACL,IAAI,CACjFZ,GAAG,CAAEa,GAAO,IAAG;MACb,OAAOA,GAAG,CAACK,OAAO,CAACH,KAAK;IAC1B,CAAC,CAAC,CACH;EACH;EAEA;EACAI,cAAcA,CAACC,EAAS;IACtB,OAAO,IAAI,CAACb,QAAQ,CAAC,WAAWa,EAAE,EAAE,CAAC;EACvC;EAEA;EACAC,YAAYA,CAACD,EAAS;IACpB,OAAO,IAAI,CAACb,QAAQ,CAAC,WAAWa,EAAE,uBAAuB,CAAC,CAACR,IAAI,CAC7DZ,GAAG,CAAEa,GAAO,IAAG;MACb,OAAOA,GAAG,CAACS,MAAM;IACnB,CAAC,CAAC,CACH;EACH;EAAC,QAAAC,CAAA,G;qBA9CUpB,cAAc,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,gBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAd3B,cAAc;IAAA4B,OAAA,EAAd5B,cAAc,CAAA6B,IAAA;IAAAC,UAAA,EAFb;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}