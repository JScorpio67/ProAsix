{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/fire/compat/auth\";\nimport * as i3 from \"@angular/fire/compat/firestore\";\nconst URL = environment.spotiUrl;\nexport class SpotifyService {\n  ///////////////////////////// API\n  constructor(http,\n  //autenticar usuario\n  afAuth,\n  //manipular db\n  firestore) {\n    this.http = http;\n    this.afAuth = afAuth;\n    this.firestore = firestore;\n  }\n  //METODO QUE REUTILIZAREMOS PARA ABREVIAR OTROS METODOS, URL SPOTIFY   \n  getQuery(query) {\n    const headers = new HttpHeaders({\n      'Authorization': 'Bearer BQDLLY7aa2w7KvFdxE8mydUAaId9Z-n194lq6xnzxku_dgucaRSwZtyZYxXrtw74tKk2hIU6fU-QyM4b2MW4_2YgNfEIpJkbKaW3YiYZfbDSSuf9fzY'\n    });\n    return this.http.get(`${URL}/${query}`, {\n      headers\n    });\n  }\n  //METODO NUEVOS ALBUMES\n  getNewReleases() {\n    return this.getQuery('browse/new-releases?limit=24').pipe(map(res => {\n      return res.albums.items;\n    }));\n  }\n  //METODO ARTISTAS, PORTADAS, ETC\n  getArtistas(termino) {\n    return this.getQuery(`search?query=${termino}&type=artist&market=es&limit=15`).pipe(map(res => {\n      return res.artists.items;\n    }));\n  }\n  //METODO PERFIL ARTISTA\n  getInfoArtista(id) {\n    return this.getQuery(`artists/${id}`);\n  }\n  //METODO TRACKS\n  getTopTracks(id) {\n    return this.getQuery(`artists/${id}/top-tracks?market=es`).pipe(map(res => {\n      return res.tracks;\n    }));\n  }\n  // Obtener el usuario autenticado actual\n  getCurrentUser() {\n    return this.afAuth.authState.pipe(map(user => user?.uid));\n  }\n  // Guardar artista favorito\n  addFavoriteArtist(artist) {\n    return this.getCurrentUser().subscribe(uid => {\n      if (uid) {\n        const userRef = this.firestore.collection('users').doc(uid);\n        userRef.collection('favorites').doc('artists').set({\n          [artist.id]: artist\n        }, {\n          merge: true\n        });\n      }\n    });\n  }\n  // Guardar álbum favorito\n  addFavoriteAlbum(album) {\n    return this.getCurrentUser().subscribe(uid => {\n      if (uid) {\n        const userRef = this.firestore.collection('users').doc(uid);\n        userRef.collection('favorites').doc('albums').set({\n          [album.id]: album\n        }, {\n          merge: true\n        });\n      }\n    });\n  }\n  // Guardar canción favorita\n  addFavoriteTrack(track) {\n    return this.getCurrentUser().subscribe(uid => {\n      if (uid) {\n        const userRef = this.firestore.collection('users').doc(uid);\n        userRef.collection('favorites').doc('tracks').set({\n          [track.id]: track\n        }, {\n          merge: true\n        });\n      }\n    });\n  }\n  // Obtener favoritos\n  getFavorites() {\n    return this.getCurrentUser().subscribe(uid => {\n      if (uid) {\n        const userRef = this.firestore.collection('users').doc(uid);\n        return userRef.collection('favorites').valueChanges();\n      }\n    });\n  }\n  static #_ = this.ɵfac = function SpotifyService_Factory(t) {\n    return new (t || SpotifyService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AngularFireAuth), i0.ɵɵinject(i3.AngularFirestore));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpotifyService,\n    factory: SpotifyService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","map","URL","spotiUrl","SpotifyService","constructor","http","afAuth","firestore","getQuery","query","headers","get","getNewReleases","pipe","res","albums","items","getArtistas","termino","artists","getInfoArtista","id","getTopTracks","tracks","getCurrentUser","authState","user","uid","addFavoriteArtist","artist","subscribe","userRef","collection","doc","set","merge","addFavoriteAlbum","album","addFavoriteTrack","track","getFavorites","valueChanges","_","i0","ɵɵinject","i1","HttpClient","i2","AngularFireAuth","i3","AngularFirestore","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ASUS\\Documents\\GitHub\\ProAsix\\src\\app\\services\\spotify.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { map, switchMap } from 'rxjs/operators'\r\n\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth'\r\nimport { AngularFirestore, AngularFirestoreDocument } from '@angular/fire/compat/firestore'\r\nimport { of } from 'rxjs'; //para observable\r\n\r\n\r\nconst URL = environment.spotiUrl\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SpotifyService {\r\n  ///////////////////////////// API\r\n  constructor(\r\n    private http:HttpClient,\r\n\r\n    //autenticar usuario\r\n    private afAuth: AngularFireAuth,\r\n    //manipular db\r\n    private firestore: AngularFirestore,\r\n\r\n  ) { }\r\n  //METODO QUE REUTILIZAREMOS PARA ABREVIAR OTROS METODOS, URL SPOTIFY   \r\n  getQuery(query:string ){\r\n    const headers = new HttpHeaders({\r\n      'Authorization' : 'Bearer BQDLLY7aa2w7KvFdxE8mydUAaId9Z-n194lq6xnzxku_dgucaRSwZtyZYxXrtw74tKk2hIU6fU-QyM4b2MW4_2YgNfEIpJkbKaW3YiYZfbDSSuf9fzY'   \r\n    });\r\n    return this.http.get(`${URL}/${query}`, {headers})\r\n  }\r\n\r\n  //METODO NUEVOS ALBUMES\r\n  getNewReleases (){\r\n    return this.getQuery('browse/new-releases?limit=24').pipe(\r\n      map((res:any)=>{\r\n        return res.albums.items;\r\n      })\r\n    );\r\n  }\r\n\r\n  //METODO ARTISTAS, PORTADAS, ETC\r\n  getArtistas(termino:string){\r\n    return this.getQuery(`search?query=${termino}&type=artist&market=es&limit=15`).pipe(\r\n      map((res:any)=>{\r\n        return res.artists.items;\r\n      })\r\n    );\r\n  }\r\n    \r\n  //METODO PERFIL ARTISTA\r\n  getInfoArtista(id:string){\r\n    return this.getQuery(`artists/${id}`)\r\n  }\r\n\r\n  //METODO TRACKS\r\n  getTopTracks(id:string) {\r\n    return this.getQuery(`artists/${id}/top-tracks?market=es`).pipe(\r\n      map((res:any)=>{\r\n        return res.tracks;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Obtener el usuario autenticado actual\r\nprivate getCurrentUser() {\r\n  return this.afAuth.authState.pipe(map(user => user?.uid));\r\n}\r\n\r\n// Guardar artista favorito\r\naddFavoriteArtist(artist: any) {\r\n  return this.getCurrentUser().subscribe(uid => {\r\n    if (uid) {\r\n      const userRef = this.firestore.collection('users').doc(uid);\r\n      userRef.collection('favorites').doc('artists').set({\r\n        [artist.id]: artist\r\n      }, { merge: true });\r\n    }\r\n  });\r\n}\r\n\r\n// Guardar álbum favorito\r\naddFavoriteAlbum(album: any) {\r\n  return this.getCurrentUser().subscribe(uid => {\r\n    if (uid) {\r\n      const userRef = this.firestore.collection('users').doc(uid);\r\n      userRef.collection('favorites').doc('albums').set({\r\n        [album.id]: album\r\n      }, { merge: true });\r\n    }\r\n  });\r\n}\r\n\r\n// Guardar canción favorita\r\naddFavoriteTrack(track: any) {\r\n  return this.getCurrentUser().subscribe(uid => {\r\n    if (uid) {\r\n      const userRef = this.firestore.collection('users').doc(uid);\r\n      userRef.collection('favorites').doc('tracks').set({\r\n        [track.id]: track\r\n      }, { merge: true });\r\n    }\r\n  });\r\n}\r\n\r\n// Obtener favoritos\r\ngetFavorites() {\r\n  return this.getCurrentUser().subscribe(uid => {\r\n    if (uid) {\r\n      const userRef = this.firestore.collection('users').doc(uid);\r\n      return userRef.collection('favorites').valueChanges();\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n} \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}