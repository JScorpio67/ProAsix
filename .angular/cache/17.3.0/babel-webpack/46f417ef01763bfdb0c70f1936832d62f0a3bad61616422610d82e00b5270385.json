{"ast":null,"code":"import { inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { RouterModule } from '@angular/router';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/form-field\";\nimport * as i2 from \"@angular/material/input\";\nimport * as i3 from \"@angular/material/icon\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/router\";\nimport * as i7 from \"@angular/common\";\nfunction NewLoginComponent_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"mat-error\");\n    i0.ÉµÉµtext(1);\n    i0.ÉµÉµelementEnd();\n  }\n  if (rf & 2) {\n    const messsage_r1 = ctx.ngIf;\n    i0.ÉµÉµadvance();\n    i0.ÉµÉµtextInterpolate(messsage_r1);\n  }\n}\nexport default class NewLoginComponent {\n  logIn() {\n    if (this.form.invalid) return;\n    console.log(this.form.value);\n  }\n  // get isEmailValid(): string | boolean {\n  //   const control = this.form.get('email');\n  //   const isInvalid = control?.invalid && control.touched;\n  //   if (isInvalid) {\n  //     return control.hasError('required')\n  //       ? 'This field is required'\n  //       : 'Enter a valid email';\n  //   }\n  //   return false;\n  // }\n  // async logIn(): Promise<void> {\n  //   if (this.form.invalid) return;\n  //   const credential: Credential = {\n  //     email: this.form.value.email || '',\n  //     password: this.form.value.password || '',\n  //   };\n  //   try {\n  //     await this.authService.logInWithEmailAndPassword(credential);\n  //     const snackBarRef = this.openSnackBar();\n  //     snackBarRef.afterDismissed().subscribe(() => {\n  //       this.router.navigateByUrl('/');\n  //     });\n  //   } catch (error) {\n  //     console.error(error);\n  //   }\n  // }\n  // openSnackBar() {\n  //   return this._snackBar.open('Succesfully Log in ðŸ˜€', 'Close', {\n  //     duration: 2500,\n  //     verticalPosition: 'top',\n  //     horizontalPosition: 'end',\n  //   });\n  // }\n  constructor() {\n    this.hide = true;\n    this.formBuilder = inject(FormBuilder);\n    // private authService = inject(AuthService);\n    // private router = inject(Router);\n    // private _snackBar = inject(MatSnackBar);\n    this.form = this.formBuilder.group({\n      email: this.formBuilder.control('', {\n        validators: [Validators.required, Validators.email],\n        nonNullable: true\n      }),\n      password: this.formBuilder.control('', {\n        validators: Validators.required,\n        nonNullable: true\n      })\n    });\n  }\n  ngOnInit() {}\n  static #_ = this.Éµfac = function NewLoginComponent_Factory(t) {\n    return new (t || NewLoginComponent)();\n  };\n  static #_2 = this.Éµcmp = /*@__PURE__*/i0.ÉµÉµdefineComponent({\n    type: NewLoginComponent,\n    selectors: [[\"loginForm\"]],\n    standalone: true,\n    features: [i0.ÉµÉµStandaloneFeature],\n    decls: 32,\n    vars: 7,\n    consts: [[1, \"form\"], [1, \"form__container\"], [3, \"ngSubmit\", \"formGroup\"], [\"matInput\", \"\", \"formControlName\", \"email\"], [4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"password\", 3, \"type\"], [\"mat-icon-button\", \"\", \"matSuffix\", \"\", 3, \"click\"], [\"mat-flat-button\", \"\", \"color\", \"accent\", \"type\", \"submit\"], [1, \"small-text\", \"providers\"], [3, \"isLogin\"], [1, \"small-text\", \"log-in-redirect\"], [\"routerLink\", \"/auth/sign-up\"]],\n    template: function NewLoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ÉµÉµelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\");\n        i0.ÉµÉµtext(3, \"Log in\");\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelementStart(4, \"form\", 2);\n        i0.ÉµÉµlistener(\"ngSubmit\", function NewLoginComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.logIn();\n        });\n        i0.ÉµÉµelementStart(5, \"div\")(6, \"mat-form-field\")(7, \"mat-label\");\n        i0.ÉµÉµtext(8, \"Email\");\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelement(9, \"input\", 3);\n        i0.ÉµÉµtemplate(10, NewLoginComponent_mat_error_10_Template, 2, 1, \"mat-error\", 4);\n        i0.ÉµÉµelementEnd()();\n        i0.ÉµÉµelementStart(11, \"div\")(12, \"mat-form-field\")(13, \"mat-label\");\n        i0.ÉµÉµtext(14, \"Enter your password\");\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelement(15, \"input\", 5);\n        i0.ÉµÉµelementStart(16, \"button\", 6);\n        i0.ÉµÉµlistener(\"click\", function NewLoginComponent_Template_button_click_16_listener() {\n          return ctx.hide = !ctx.hide;\n        });\n        i0.ÉµÉµelementStart(17, \"mat-icon\");\n        i0.ÉµÉµtext(18);\n        i0.ÉµÉµelementEnd()();\n        i0.ÉµÉµelementStart(19, \"mat-error\");\n        i0.ÉµÉµtext(20, \"This field is required\");\n        i0.ÉµÉµelementEnd()()();\n        i0.ÉµÉµelementStart(21, \"div\")(22, \"button\", 7);\n        i0.ÉµÉµtext(23, \"Log in\");\n        i0.ÉµÉµelementEnd()()();\n        i0.ÉµÉµelement(24, \"hr\");\n        i0.ÉµÉµelementStart(25, \"span\", 8);\n        i0.ÉµÉµtext(26, \"Have Google or GitHub?\");\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelement(27, \"app-button-providers\", 9);\n        i0.ÉµÉµelementStart(28, \"span\", 10);\n        i0.ÉµÉµtext(29, \"Don\\u2019t have an account yet? \");\n        i0.ÉµÉµelementStart(30, \"a\", 11);\n        i0.ÉµÉµtext(31, \"Sign up\");\n        i0.ÉµÉµelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ÉµÉµadvance(4);\n        i0.ÉµÉµproperty(\"formGroup\", ctx.form);\n        i0.ÉµÉµadvance(6);\n        i0.ÉµÉµproperty(\"ngIf\", ctx.isEmailValid);\n        i0.ÉµÉµadvance(5);\n        i0.ÉµÉµproperty(\"type\", ctx.hide ? \"password\" : \"text\");\n        i0.ÉµÉµadvance();\n        i0.ÉµÉµattribute(\"aria-label\", \"Hide password\")(\"aria-pressed\", ctx.hide);\n        i0.ÉµÉµadvance(2);\n        i0.ÉµÉµtextInterpolate(ctx.hide ? \"visibility_off\" : \"visibility\");\n        i0.ÉµÉµadvance(9);\n        i0.ÉµÉµproperty(\"isLogin\", true);\n      }\n    },\n    dependencies: [MatFormFieldModule, i1.MatFormField, i1.MatLabel, i1.MatError, i1.MatSuffix, MatInputModule, i2.MatInput, MatIconModule, i3.MatIcon, MatButtonModule, i4.MatButton, i4.MatIconButton, ReactiveFormsModule, i5.ÉµNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName, RouterModule, i6.RouterLink, CommonModule, i7.NgIf, MatSnackBarModule]\n  });\n}","map":{"version":3,"names":["inject","CommonModule","FormBuilder","ReactiveFormsModule","Validators","MatFormFieldModule","MatInputModule","MatIconModule","MatButtonModule","RouterModule","MatSnackBarModule","i0","ÉµÉµelementStart","ÉµÉµtext","ÉµÉµelementEnd","ÉµÉµadvance","ÉµÉµtextInterpolate","messsage_r1","NewLoginComponent","logIn","form","invalid","console","log","value","constructor","hide","formBuilder","group","email","control","validators","required","nonNullable","password","ngOnInit","_","_2","selectors","standalone","features","ÉµÉµStandaloneFeature","decls","vars","consts","template","NewLoginComponent_Template","rf","ctx","ÉµÉµlistener","NewLoginComponent_Template_form_ngSubmit_4_listener","ÉµÉµelement","ÉµÉµtemplate","NewLoginComponent_mat_error_10_Template","NewLoginComponent_Template_button_click_16_listener","ÉµÉµproperty","isEmailValid","i1","MatFormField","MatLabel","MatError","MatSuffix","i2","MatInput","i3","MatIcon","i4","MatButton","MatIconButton","i5","ÉµNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","i6","RouterLink","i7","NgIf"],"sources":["C:\\Users\\ASUS\\Documents\\GitHub\\ProAsix\\src\\app\\auth\\form-login\\form-login.ts","C:\\Users\\ASUS\\Documents\\GitHub\\ProAsix\\src\\app\\auth\\form-login\\form-login.component.html"],"sourcesContent":["import { Component, inject, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\n\r\n\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\r\n//import { AuthService, Credential } from '../../../core/services/auth.service';\r\n\r\n\r\ninterface interfaceLoginForm{\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\n@Component({\r\n  standalone: true,\r\n  imports:[\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n    CommonModule,\r\n    MatSnackBarModule\r\n  ],\r\n  selector: 'loginForm',\r\n  templateUrl: './form-login.component.html',\r\n  styles: [``]\r\n})\r\n\r\nexport default class NewLoginComponent implements OnInit {\r\n  hide = true;\r\n\r\n  formBuilder = inject(FormBuilder);\r\n\r\n  // private authService = inject(AuthService);\r\n\r\n  // private router = inject(Router);\r\n\r\n  // private _snackBar = inject(MatSnackBar);\r\n\r\n  form: FormGroup<interfaceLoginForm> = this.formBuilder.group({\r\n    email: this.formBuilder.control('', {\r\n      validators: [Validators.required, Validators.email],\r\n      nonNullable: true,\r\n    }),\r\n    password: this.formBuilder.control('', {\r\n      validators: Validators.required,\r\n      nonNullable: true,\r\n    }),\r\n  });\r\n\r\n  logIn(): void {\r\n    if (this.form.invalid) return;\r\n    console.log(this.form.value)\r\n  }\r\n\r\n  // get isEmailValid(): string | boolean {\r\n  //   const control = this.form.get('email');\r\n\r\n  //   const isInvalid = control?.invalid && control.touched;\r\n\r\n  //   if (isInvalid) {\r\n  //     return control.hasError('required')\r\n  //       ? 'This field is required'\r\n  //       : 'Enter a valid email';\r\n  //   }\r\n\r\n  //   return false;\r\n  // }\r\n\r\n  // async logIn(): Promise<void> {\r\n  //   if (this.form.invalid) return;\r\n\r\n  //   const credential: Credential = {\r\n  //     email: this.form.value.email || '',\r\n  //     password: this.form.value.password || '',\r\n  //   };\r\n\r\n  //   try {\r\n  //     await this.authService.logInWithEmailAndPassword(credential);\r\n  //     const snackBarRef = this.openSnackBar();\r\n\r\n  //     snackBarRef.afterDismissed().subscribe(() => {\r\n  //       this.router.navigateByUrl('/');\r\n  //     });\r\n  //   } catch (error) {\r\n  //     console.error(error);\r\n  //   }\r\n  // }\r\n\r\n  // openSnackBar() {\r\n  //   return this._snackBar.open('Succesfully Log in ðŸ˜€', 'Close', {\r\n  //     duration: 2500,\r\n  //     verticalPosition: 'top',\r\n  //     horizontalPosition: 'end',\r\n  //   });\r\n  // }\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() { }\r\n}","<div class=\"form\">\r\n    <div class=\"form__container\">\r\n      <h1>Log in</h1>\r\n      <form [formGroup]=\"form\" (ngSubmit)=\"logIn()\">\r\n        <div>\r\n          <mat-form-field>\r\n            <mat-label>Email</mat-label>\r\n            <input matInput formControlName=\"email\" />\r\n            <mat-error *ngIf=\"isEmailValid as messsage\">{{ messsage }}</mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n  \r\n        <div>\r\n          <mat-form-field>\r\n            <mat-label>Enter your password</mat-label>\r\n            <input\r\n              matInput\r\n              [type]=\"hide ? 'password' : 'text'\"\r\n              formControlName=\"password\"\r\n            />\r\n            <button\r\n              mat-icon-button\r\n              matSuffix\r\n              (click)=\"hide = !hide\"\r\n              [attr.aria-label]=\"'Hide password'\"\r\n              [attr.aria-pressed]=\"hide\"\r\n            >\r\n              <mat-icon>{{ hide ? \"visibility_off\" : \"visibility\" }}</mat-icon>\r\n            </button>\r\n            <mat-error>This field is required</mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n  \r\n        <div>\r\n          <button mat-flat-button color=\"accent\" type=\"submit\">Log in</button>\r\n        </div>\r\n      </form>\r\n      <hr />\r\n      <span class=\"small-text providers\">Have Google or GitHub?</span>\r\n      <app-button-providers [isLogin]=\"true\" />\r\n      <span class=\"small-text log-in-redirect\"\r\n        >Donâ€™t have an account yet?\r\n        <a routerLink=\"/auth/sign-up\">Sign up</a></span\r\n      >\r\n    </div>\r\n  </div>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}