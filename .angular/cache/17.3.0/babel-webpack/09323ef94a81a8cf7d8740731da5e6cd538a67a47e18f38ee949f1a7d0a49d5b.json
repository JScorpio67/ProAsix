{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst URL = environment.spotiUrl;\nexport let SpotifyService = /*#__PURE__*/(() => {\n  class SpotifyService {\n    constructor(http) {\n      this.http = http;\n    }\n    //METODO QUE REUTILIZAREMOS PARA ABREVIAR OTROS METODOS, URL SPOTIFY   \n    getQuery(query) {\n      const headers = new HttpHeaders({\n        'Authorization': 'Bearer BQBbtNV-RQ_puDMj80fxAB9uxnvcCuiEtJeK9Gh1QeFxd2T_fGaCMP-ChmeBJY7S8JS99_Wf2bBBPIttOmW2_rqvSfCTs2tK3hHytxRyzgtqfLNKVJE'\n      });\n      return this.http.get(`${URL}/${query}`, {\n        headers\n      });\n    }\n    //METODO NUEVOS ALBUMES\n    getNewReleases() {\n      return this.getQuery('browse/new-releases?limit=24').pipe(map(res => {\n        return res.albums.items;\n      }));\n    }\n    //METODO ARTISTAS, PORTADAS, ETC\n    getArtistas(termino) {\n      return this.getQuery(`search?query=${termino}&type=artist&market=es&limit=15`).pipe(map(res => {\n        return res.artists.items;\n      }));\n    }\n    //METODO PERFIL ARTISTA\n    getInfoArtista(id) {\n      return this.getQuery(`artists/${id}`);\n    }\n    //METODO TRACKS\n    getTopTracks(id) {\n      return this.getQuery(`artists/${id}/top-tracks?market=es`).pipe(map(res => {\n        return res.tracks;\n      }));\n    }\n    static #_ = this.ɵfac = function SpotifyService_Factory(t) {\n      return new (t || SpotifyService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SpotifyService,\n      factory: SpotifyService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return SpotifyService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}