{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ASUS/Documents/GitHub/ProAsix/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Injectable, inject } from '@angular/core';\nimport { Auth, authState } from '@angular/fire/auth';\nimport { GithubAuthProvider, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signInWithPopup } from 'firebase/auth';\nlet AuthService = class AuthService {\n  constructor(auth) {\n    this.auth = auth;\n    //inyeccion, doc firebase\n    this.auth = inject(Auth);\n    this.authState$ = authState(this.auth);\n  }\n  signUpWithEmailAndPassword(credencial) {\n    //necesita el auth (inyectado), email (string) y pass(string)\n    return createUserWithEmailAndPassword(this.auth, credencial.email, credencial.password);\n  }\n  logInWithEmailAndPassword(credencial) {\n    return signInWithEmailAndPassword(this.auth, credencial.email, credencial.password);\n  }\n  //CERRAR SESION\n  logOut() {\n    return this.auth.signOut();\n  }\n  // providers GOOGLE, GITHUB\n  signInWithGoogleProvider() {\n    const provider = new GoogleAuthProvider();\n    return this.callPopUp(provider);\n  }\n  signInWithGithubProvider() {\n    const provider = new GithubAuthProvider();\n    return this.callPopUp(provider);\n  }\n  callPopUp(provider) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const result = yield signInWithPopup(_this.auth, provider);\n        return result;\n      } catch (error) {\n        return error;\n      }\n    })();\n  }\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"names":["Injectable","inject","Auth","authState","GithubAuthProvider","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signInWithPopup","AuthService","constructor","auth","authState$","signUpWithEmailAndPassword","credencial","email","password","logInWithEmailAndPassword","logOut","signOut","signInWithGoogleProvider","provider","callPopUp","signInWithGithubProvider","_this","_asyncToGenerator","result","error","__decorate","providedIn"],"sources":["C:\\Users\\ASUS\\Documents\\GitHub\\ProAsix\\src\\app\\services\\auth\\firebase\\auth.service.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core'\r\nimport { Auth, authState } from '@angular/fire/auth';\r\nimport { \r\n    AuthProvider,\r\n    GithubAuthProvider,\r\n    GoogleAuthProvider,\r\n    UserCredential,\r\n    createUserWithEmailAndPassword,\r\n    signInWithEmailAndPassword,\r\n    signInWithPopup,\r\n} from 'firebase/auth';\r\n// import { AngularFireAuth } from '@angular/fire/compat/auth';\r\n// import { AuthService as AngularFireAuthService } from '@angular/fire/auth';\r\n\r\nexport interface Credential {\r\n    email:string;\r\n    password:string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService{\r\n\r\n  constructor(private auth:AngularFireAuth){ }\r\n\r\n    //inyeccion, doc firebase\r\n    private auth: Auth = inject(Auth);\r\n\r\n    readonly authState$ = authState(this.auth)\r\n\r\n    signUpWithEmailAndPassword(credencial:Credential): Promise<UserCredential>{\r\n        //necesita el auth (inyectado), email (string) y pass(string)\r\n        return createUserWithEmailAndPassword(\r\n            this.auth,\r\n            credencial.email,\r\n            credencial.password\r\n        )\r\n    }\r\n\r\n    logInWithEmailAndPassword(credencial:Credential){\r\n        return signInWithEmailAndPassword(\r\n            this.auth,\r\n            credencial.email,\r\n            credencial.password\r\n        )\r\n    }\r\n\r\n    //CERRAR SESION\r\n    logOut(): Promise<void> {\r\n      return this.auth.signOut();\r\n    }\r\n\r\n    // providers GOOGLE, GITHUB\r\n    signInWithGoogleProvider(): Promise<UserCredential> {\r\n        const provider = new GoogleAuthProvider();\r\n\r\n        return this.callPopUp(provider);\r\n    }\r\n\r\n    signInWithGithubProvider(): Promise<UserCredential> {\r\n        const provider = new GithubAuthProvider();\r\n\r\n        return this.callPopUp(provider);\r\n  }\r\n\r\n  async callPopUp(provider: AuthProvider): Promise<UserCredential> {\r\n    try {\r\n      const result = await signInWithPopup(this.auth, provider);\r\n\r\n      return result;\r\n    } catch (error: any) {\r\n      return error;\r\n    }\r\n  }\r\n\r\n  // IngresarconGoogle(){\r\n  //   this.\r\n  // }\r\n\r\n  // getUserLogged() {\r\n  //   return this.afauth.authState;\r\n  // }\r\n}\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,SAASA,UAAU,EAAEC,MAAM,QAAQ,eAAe;AAClD,SAASC,IAAI,EAAEC,SAAS,QAAQ,oBAAoB;AACpD,SAEIC,kBAAkB,EAClBC,kBAAkB,EAElBC,8BAA8B,EAC9BC,0BAA0B,EAC1BC,eAAe,QACZ,eAAe;AAYf,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EAEtBC,YAAoBC,IAAoB;IAApB,KAAAA,IAAI,GAAJA,IAAI;IAEtB;IACQ,KAAAA,IAAI,GAASV,MAAM,CAACC,IAAI,CAAC;IAExB,KAAAU,UAAU,GAAGT,SAAS,CAAC,IAAI,CAACQ,IAAI,CAAC;EALD;EAOzCE,0BAA0BA,CAACC,UAAqB;IAC5C;IACA,OAAOR,8BAA8B,CACjC,IAAI,CAACK,IAAI,EACTG,UAAU,CAACC,KAAK,EAChBD,UAAU,CAACE,QAAQ,CACtB;EACL;EAEAC,yBAAyBA,CAACH,UAAqB;IAC3C,OAAOP,0BAA0B,CAC7B,IAAI,CAACI,IAAI,EACTG,UAAU,CAACC,KAAK,EAChBD,UAAU,CAACE,QAAQ,CACtB;EACL;EAEA;EACAE,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACP,IAAI,CAACQ,OAAO,EAAE;EAC5B;EAEA;EACAC,wBAAwBA,CAAA;IACpB,MAAMC,QAAQ,GAAG,IAAIhB,kBAAkB,EAAE;IAEzC,OAAO,IAAI,CAACiB,SAAS,CAACD,QAAQ,CAAC;EACnC;EAEAE,wBAAwBA,CAAA;IACpB,MAAMF,QAAQ,GAAG,IAAIjB,kBAAkB,EAAE;IAEzC,OAAO,IAAI,CAACkB,SAAS,CAACD,QAAQ,CAAC;EACrC;EAEMC,SAASA,CAACD,QAAsB;IAAA,IAAAG,KAAA;IAAA,OAAAC,iBAAA;MACpC,IAAI;QACF,MAAMC,MAAM,SAASlB,eAAe,CAACgB,KAAI,CAACb,IAAI,EAAEU,QAAQ,CAAC;QAEzD,OAAOK,MAAM;MACf,CAAC,CAAC,OAAOC,KAAU,EAAE;QACnB,OAAOA,KAAK;MACd;IAAC;EACH;CASD;AA7DYlB,WAAW,GAAAmB,UAAA,EAHvB5B,UAAU,CAAC;EACR6B,UAAU,EAAE;CACf,CAAC,C,EACWpB,WAAW,CA6DvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}