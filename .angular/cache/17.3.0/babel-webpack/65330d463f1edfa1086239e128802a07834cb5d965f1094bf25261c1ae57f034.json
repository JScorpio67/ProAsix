{"ast":null,"code":"import { catchError, throwError, BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    constructor(http) {\n      this.http = http;\n      //DEFINICION DE LOS BEHAVIOUR SUBJECTS\n      this.currentUserLoginOn = new BehaviorSubject(false);\n      this.currentUserData = new BehaviorSubject({\n        id: 0,\n        email: ''\n      });\n    }\n    //CREAMOS EL METODO LOGIN\n    //login(formulario_input:any){ //any es muy generico\n    login(formulario_input) {\n      //src/assets/data.json\n      //url de donde cogemos los datos del usuario\n      return this.http.get('././assets/data.json').pipe(\n      //TAP PARA EMITIR LA INFORMACION A LOS COMPONENTES SUSCRITOS\n      tap(userData => {\n        this.currentUserData.next(userData);\n        this.currentUserLoginOn.next(true);\n      }), catchError(this.handlerError));\n    }\n    //MANEJADOR DE ERRORES\n    handlerError(error) {\n      if (error.status === 0) {\n        console.error('Se ha producido un error', error.error);\n      } else {\n        console.error('Backend retorno el codigo de estado', error.status, error.error);\n        //retornamos la excepcion.\n      }\n      return throwError(() => new Error('Algo falló, intente nuevamente'));\n    }\n    //SUSCRIBCION DE LOS COMPONENTES\n    get userData() {\n      return this.currentUserData.asObservable();\n    }\n    get userLoginOn() {\n      return this.currentUserLoginOn.asObservable();\n    }\n    static #_ = this.ɵfac = function LoginService_Factory(t) {\n      return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoginService,\n      factory: LoginService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return LoginService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}