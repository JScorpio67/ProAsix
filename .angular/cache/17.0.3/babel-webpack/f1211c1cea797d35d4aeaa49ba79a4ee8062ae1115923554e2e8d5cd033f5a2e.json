{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst URL = environment.spotiUrl;\nexport class SpotifyService {\n  constructor(http) {\n    this.http = http;\n  }\n  //METODO QUE REUTILIZAREMOS PARA ABREVIAR OTROS METODOS, URL SPOTIFY   \n  getQuery(query) {\n    const headers = new HttpHeaders({\n      'Authorization': 'Bearer BQB1MD_DD2dqIuqoaXik95UeXOtYWVom7Mzw65XqaJHIwguQhxoJ8cZv-ucHiQfy-AXBg9txb2VCmpz6TOKjlhcZoYBxFxT4oJYaGLKim-o4wyxpr98'\n    });\n    return this.http.get(`${URL}/${query}`, {\n      headers\n    });\n  }\n  //METODO NUEVOS ALBUMES\n  getNewReleases() {\n    return this.getQuery('browse/new-releases?limit=24').pipe(map(res => {\n      return res.albums.items;\n    }));\n  }\n  //METODO ARTISTAS, PORTADAS, ETC\n  getArtistas(termino) {\n    return this.getQuery(`search?query=${termino}&type=artist&market=es&limit=15`).pipe(map(res => {\n      return res.artists.items;\n    }));\n  }\n  //METODO PERFIL ARTISTA\n  getInfoArtista(id) {\n    return this.getQuery(`artists/${id}`);\n  }\n  //METODO TRACKS\n  getTopTracks(id) {\n    return this.getQuery(`artists/${id}/top-tracks?market=es`).pipe(map(res => {\n      return res.tracks;\n    }));\n  }\n  static #_ = this.ɵfac = function SpotifyService_Factory(t) {\n    return new (t || SpotifyService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpotifyService,\n    factory: SpotifyService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","map","URL","spotiUrl","SpotifyService","constructor","http","getQuery","query","headers","get","getNewReleases","pipe","res","albums","items","getArtistas","termino","artists","getInfoArtista","id","getTopTracks","tracks","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/carja/Documentos/GitHub/ProAsix/src/app/services/spotify.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators'\n\nconst URL = environment.spotiUrl\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpotifyService {\n\n  constructor(private http:HttpClient) { }\n  //METODO QUE REUTILIZAREMOS PARA ABREVIAR OTROS METODOS, URL SPOTIFY   \n  getQuery(query:string ){\n    const headers = new HttpHeaders({\n      'Authorization' : 'Bearer BQB1MD_DD2dqIuqoaXik95UeXOtYWVom7Mzw65XqaJHIwguQhxoJ8cZv-ucHiQfy-AXBg9txb2VCmpz6TOKjlhcZoYBxFxT4oJYaGLKim-o4wyxpr98'\n   \n    });\n    return this.http.get(`${URL}/${query}`, {headers})\n  }\n\n  //METODO NUEVOS ALBUMES\n  getNewReleases (){\n    return this.getQuery('browse/new-releases?limit=24').pipe(\n      map((res:any)=>{\n        return res.albums.items;\n      })\n    );\n  }\n\n\n  //METODO ARTISTAS, PORTADAS, ETC\n  getArtistas(termino:string){\n    return this.getQuery(`search?query=${termino}&type=artist&market=es&limit=15`).pipe(\n      map((res:any)=>{\n        return res.artists.items;\n      })\n    );\n  }\n    \n  //METODO PERFIL ARTISTA\n  getInfoArtista(id:string){\n    return this.getQuery(`artists/${id}`)\n  }\n\n\n  //METODO TRACKS\n  getTopTracks(id:string) {\n    return this.getQuery(`artists/${id}/top-tracks?market=es`).pipe(\n      map((res:any)=>{\n        return res.tracks;\n      })\n    );\n  }\n\n\n  //METODO TOPARTISTAS\n // getTopArtists (){\n   // return this.getQuery{`artists`};\n  //}\n\n\n} \n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,GAAG,QAAQ,gBAAgB;;;AAEpC,MAAMC,GAAG,GAAGF,WAAW,CAACG,QAAQ;AAKhC,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;EAAe;EACvC;EACAC,QAAQA,CAACC,KAAY;IACnB,MAAMC,OAAO,GAAG,IAAIV,WAAW,CAAC;MAC9B,eAAe,EAAG;KAEnB,CAAC;IACF,OAAO,IAAI,CAACO,IAAI,CAACI,GAAG,CAAC,GAAGR,GAAG,IAAIM,KAAK,EAAE,EAAE;MAACC;IAAO,CAAC,CAAC;EACpD;EAEA;EACAE,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACJ,QAAQ,CAAC,8BAA8B,CAAC,CAACK,IAAI,CACvDX,GAAG,CAAEY,GAAO,IAAG;MACb,OAAOA,GAAG,CAACC,MAAM,CAACC,KAAK;IACzB,CAAC,CAAC,CACH;EACH;EAGA;EACAC,WAAWA,CAACC,OAAc;IACxB,OAAO,IAAI,CAACV,QAAQ,CAAC,gBAAgBU,OAAO,iCAAiC,CAAC,CAACL,IAAI,CACjFX,GAAG,CAAEY,GAAO,IAAG;MACb,OAAOA,GAAG,CAACK,OAAO,CAACH,KAAK;IAC1B,CAAC,CAAC,CACH;EACH;EAEA;EACAI,cAAcA,CAACC,EAAS;IACtB,OAAO,IAAI,CAACb,QAAQ,CAAC,WAAWa,EAAE,EAAE,CAAC;EACvC;EAGA;EACAC,YAAYA,CAACD,EAAS;IACpB,OAAO,IAAI,CAACb,QAAQ,CAAC,WAAWa,EAAE,uBAAuB,CAAC,CAACR,IAAI,CAC7DX,GAAG,CAAEY,GAAO,IAAG;MACb,OAAOA,GAAG,CAACS,MAAM;IACnB,CAAC,CAAC,CACH;EACH;EAAC,QAAAC,CAAA,G;qBA5CUnB,cAAc,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdxB,cAAc;IAAAyB,OAAA,EAAdzB,cAAc,CAAA0B,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}