{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ArtistaComponent = class ArtistaComponent {\n  constructor(spotify, router) {\n    this.spotify = spotify;\n    this.router = router;\n    this.artista = {};\n    //topTracks almacenara todo el array\n    this.topTracks = [];\n    this.loadingArtista = true;\n    this.router.params.subscribe(params => {\n      //console.log(params)\n      //la pasamos el parametro ID\n      this.getInfoArtista(params[`id`]);\n      //incializamos con el nombre del metodo que creamos en spotify.service\n      this.getTopTracks(params[`id`]);\n    });\n  }\n  getInfoArtista(id) {\n    this.loadingArtista = true;\n    this.spotify.getInfoArtista(id).subscribe(res => {\n      console.log(res);\n      this.artista = res;\n      //para cuando se haya cargado la info, dejara de salir la carga\n      this.loadingArtista = false;\n    });\n  }\n  //NUEVO METODO, info musica\n  getTopTracks(id) {\n    this.spotify.getTopTracks(id).subscribe(res => {\n      console.log(res);\n      this.topTracks = res;\n    });\n  }\n};\nArtistaComponent = __decorate([Component({\n  selector: 'app-artista',\n  templateUrl: './artista.component.html',\n  styleUrls: ['./artista.component.css']\n})], ArtistaComponent);\nexport { ArtistaComponent };","map":{"version":3,"names":["Component","ArtistaComponent","constructor","spotify","router","artista","topTracks","loadingArtista","params","subscribe","getInfoArtista","getTopTracks","id","res","console","log","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/carja/Documentos/GitHub/ProAsix/src/app/pages/artista/artista.component.ts"],"sourcesContent":["import { Component} from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { SpotifyService } from 'src/app/services/spotify.service';\n\n@Component({\n  selector: 'app-artista',\n  templateUrl: './artista.component.html',\n  styleUrls: ['./artista.component.css']\n})\n\n\nexport class ArtistaComponent{\n\n  artista:any={};\n\n  //topTracks almacenara todo el array\n  topTracks:any[] = [];\n  loadingArtista:boolean;\n\n  constructor(private spotify:SpotifyService, private router:ActivatedRoute) {\n    \n    this.loadingArtista=true;\n\n    this.router.params.subscribe(params =>{\n      //console.log(params)\n      //la pasamos el parametro ID\n      this.getInfoArtista(params[`id`]);\n\n      //incializamos con el nombre del metodo que creamos en spotify.service\n      this.getTopTracks(params[`id`]);\n    })\n  }\n\n  getInfoArtista(id:string){\n\n    this.loadingArtista=true;\n    \n    this.spotify.getInfoArtista(id).subscribe(res=>{\n      console.log(res);\n\n      this.artista=res;\n\n      //para cuando se haya cargado la info, dejara de salir la carga\n      this.loadingArtista=false;\n    })\n  }\n\n  //NUEVO METODO, info musica\n  getTopTracks(id:string) {\n    this.spotify.getTopTracks(id).subscribe(res=>{\n      console.log(res);\n      this.topTracks = res;\n    })\n  }\n  \n\n  \n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAO,eAAe;AAWjC,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAQ3BC,YAAoBC,OAAsB,EAAUC,MAAqB;IAArD,KAAAD,OAAO,GAAPA,OAAO;IAAyB,KAAAC,MAAM,GAANA,MAAM;IAN1D,KAAAC,OAAO,GAAK,EAAE;IAEd;IACA,KAAAC,SAAS,GAAS,EAAE;IAKlB,IAAI,CAACC,cAAc,GAAC,IAAI;IAExB,IAAI,CAACH,MAAM,CAACI,MAAM,CAACC,SAAS,CAACD,MAAM,IAAG;MACpC;MACA;MACA,IAAI,CAACE,cAAc,CAACF,MAAM,CAAC,IAAI,CAAC,CAAC;MAEjC;MACA,IAAI,CAACG,YAAY,CAACH,MAAM,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC,CAAC;EACJ;EAEAE,cAAcA,CAACE,EAAS;IAEtB,IAAI,CAACL,cAAc,GAAC,IAAI;IAExB,IAAI,CAACJ,OAAO,CAACO,cAAc,CAACE,EAAE,CAAC,CAACH,SAAS,CAACI,GAAG,IAAE;MAC7CC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAEhB,IAAI,CAACR,OAAO,GAACQ,GAAG;MAEhB;MACA,IAAI,CAACN,cAAc,GAAC,KAAK;IAC3B,CAAC,CAAC;EACJ;EAEA;EACAI,YAAYA,CAACC,EAAS;IACpB,IAAI,CAACT,OAAO,CAACQ,YAAY,CAACC,EAAE,CAAC,CAACH,SAAS,CAACI,GAAG,IAAE;MAC3CC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChB,IAAI,CAACP,SAAS,GAAGO,GAAG;IACtB,CAAC,CAAC;EACJ;CAID;AA9CYZ,gBAAgB,GAAAe,UAAA,EAP5BhB,SAAS,CAAC;EACTiB,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EAGWlB,gBAAgB,CA8C5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}